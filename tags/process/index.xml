<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>process on T[h]ink]er[ing</title>
    <link>torokmark.github.io/tags/process/</link>
    <description>Recent content in process on T[h]ink]er[ing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Apr 2020 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="torokmark.github.io/tags/process/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Do you know Java: Execute Shell Commands</title>
      <link>torokmark.github.io/posts/do-you-know-java-execute-shell-commands/</link>
      <pubDate>Tue, 28 Apr 2020 12:00:00 +0100</pubDate>
      
      <guid>torokmark.github.io/posts/do-you-know-java-execute-shell-commands/</guid>
      <description>Two ways are shown here about how to execute shell scripts and commands with Java.
In this post I am showing two ways to execute shell scripts or shell commands from a Java app.
ProcessBuilder ProcessBuilder class has been created to create and handle operating system processes.
ProcessBuilder#start method creates a single native process. Let us see how to do it.
ProcessBuilder builder = new ProcessBuilder(); builder.command(&amp;#34;bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;ping google.com&amp;#34;); Process process; try { process = builder.</description>
    </item>
    
  </channel>
</rss>