<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>equals on T[h]ink]er[ing</title>
    <link>https://torokmark.github.io/tags/equals/</link>
    <description>Recent content in equals on T[h]ink]er[ing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Mar 2021 12:00:00 +0100</lastBuildDate><atom:link href="https://torokmark.github.io/tags/equals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Do you know Java: Beware of instanceof in equals</title>
      <link>https://torokmark.github.io/posts/do-you-know-java-beware-of-instanceof-in-equals/</link>
      <pubDate>Wed, 31 Mar 2021 12:00:00 +0100</pubDate>
      
      <guid>https://torokmark.github.io/posts/do-you-know-java-beware-of-instanceof-in-equals/</guid>
      <description>One of the most important methods is equals. So, it is also important how it is implemented.
What is the real issue with instanceof and equals? Let us see an implementation of it. First, let us introduce a simple class and its inheritant that demonstrate the usage of equals`.
public class Mug { private double capacity; // ctor, setter, getter  @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null) { return false; } if (!</description>
    </item>
    
  </channel>
</rss>
