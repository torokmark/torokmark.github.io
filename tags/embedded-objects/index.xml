<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embedded Objects on T[h]inking</title>
    <link>/tags/embedded-objects/</link>
    <description>Recent content in Embedded Objects on T[h]inking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jul 2019 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="/tags/embedded-objects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Safe navigation in languages</title>
      <link>/post/safe-navigation-in-languages/</link>
      <pubDate>Wed, 24 Jul 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/safe-navigation-in-languages/</guid>
      <description>As we saw in the previous post, Ruby development team introduced a safe navigation operator to get rid of painful chaining of objects, which could raise NPE in case of null object in the middle. But Ruby is not the only language that came up with this idea. Most of the languages have introduced this operator, usually called null propagation, or some other approaches to achieve the same goal.</description>
    </item>
    
    <item>
      <title>Safe navigation in Ruby</title>
      <link>/post/safe-navigation-in-ruby/</link>
      <pubDate>Mon, 17 Jun 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/safe-navigation-in-ruby/</guid>
      <description>Navigation through embedded objects can suprise us with an error if one of the fields, which are objects as well, is null. We are in the same situation if we have a hash object and want to get a value by key if key does not exist. The burning situation crops up if we chain up methods next to each other.
In this post I write some approaches, how to keep our code still clean, readable and safe if we liked to chain up calls next one another on an object or on a key-value pair container.</description>
    </item>
    
  </channel>
</rss>