<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>entry point on T[h]ink]er[ing</title>
    <link>https://torokmark.github.io/tags/entry-point/</link>
    <description>Recent content in entry point on T[h]ink]er[ing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Oct 2019 12:00:00 +0100</lastBuildDate><atom:link href="https://torokmark.github.io/tags/entry-point/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Do you know Java: Varargs as Entry Point Parameter</title>
      <link>https://torokmark.github.io/posts/do-you-know-java-varargs-in-entry-point/</link>
      <pubDate>Tue, 15 Oct 2019 12:00:00 +0100</pubDate>
      
      <guid>https://torokmark.github.io/posts/do-you-know-java-varargs-in-entry-point/</guid>
      <description>Java 5 was one of those versions that brought much more features and syntactic sugars than any other of them. Varargs is one of those. This provides a very comfortable way to pass different number of arguments to a method. Can we use it anywhere?
Varargs is just a syntactic sugar, it can be used in a more flexible way than its predecessor, the typed array. It has the same characteristics which means it supports indexing, it has an attribute called length, it is iterable.</description>
    </item>
    
    <item>
      <title>Do you know Java: Entry Point in Interface or Enum</title>
      <link>https://torokmark.github.io/posts/do-you-know-java-entry-point-in-interface/</link>
      <pubDate>Fri, 09 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>https://torokmark.github.io/posts/do-you-know-java-entry-point-in-interface/</guid>
      <description>All Java applications start with a class and an entry point in it. We can change the class type to others.
All Java applications start at one common point. That is a class which has at least one static method, called main as an entry point of the app. This method is called by JRE after the class is loaded when we execute java command with the appropriate name of the class.</description>
    </item>
    
  </channel>
</rss>
