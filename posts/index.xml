<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on T[h]ink]er[ing</title>
		<link>https://torokmark.github.io/posts/</link>
		<description>Recent content in Posts on T[h]ink]er[ing</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Thu, 01 Apr 2021 12:00:00 +0100</lastBuildDate>
		<atom:link href="https://torokmark.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Fix that Java: Set is Bigger</title>
			<link>https://torokmark.github.io/posts/fix-that-java-set-is-bigger/</link>
			<pubDate>Thu, 01 Apr 2021 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/fix-that-java-set-is-bigger/</guid>
			<description>As we see, the following code works bit different as we expect.
import java.util.Set; import java.util.HashSet; class Main { public static void main(String[] args) { Set&amp;lt;Dog&amp;gt; dogs = new HashSet&amp;lt;&amp;gt;(); Dog caesar = new Dog(&amp;#34;German Shepherd&amp;#34;); Dog rex = new Dog(&amp;#34;German Shepherd&amp;#34;); dogs.add(caesar); dogs.add(rex); System.out.println(caesar.equals(rex)); System.out.println(dogs.size()); } } class Dog { private String breed; public Dog(String breed) { this.breed = breed; } public int hashCode() { return breed.hashCode(); } public boolean equals(Dog o) { return breed.</description>
			<content type="html"><![CDATA[<p>As we see, the following code works bit different as we expect.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Dog</span><span class="o">&gt;</span> <span class="n">dogs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>

        <span class="n">Dog</span> <span class="n">caesar</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dog</span><span class="o">(</span><span class="s">&#34;German Shepherd&#34;</span><span class="o">);</span>
        <span class="n">Dog</span> <span class="n">rex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Dog</span><span class="o">(</span><span class="s">&#34;German Shepherd&#34;</span><span class="o">);</span>

        <span class="n">dogs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">caesar</span><span class="o">);</span>
        <span class="n">dogs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rex</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">caesar</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">rex</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dogs</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">breed</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Dog</span><span class="o">(</span><span class="n">String</span> <span class="n">breed</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">breed</span> <span class="o">=</span> <span class="n">breed</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">breed</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Dog</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">breed</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">breed</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Fix it and enjoy!</p>
]]></content>
		</item>
		
		<item>
			<title>Fix that Java: Challenge</title>
			<link>https://torokmark.github.io/posts/fix-that-java-challenge/</link>
			<pubDate>Thu, 01 Apr 2021 11:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/fix-that-java-challenge/</guid>
			<description>In this series I am going to share short codes with well-known, or less well-known but common problems that we, developers face from time to time during our work.
The series is about learning the language, learning its features, functionalities, and limits. It is up to you how to do it!
I am going to post a code snippet with a hidden misfunctionality. You can solve that in any way as you like keeping the rules and limitations that I attach to the snippet.</description>
			<content type="html"><![CDATA[<p>In this series I am going to share short codes with well-known, or less well-known
but common problems that we, developers face from time to time during our work.</p>
<p>The series is about learning the language, learning its features, functionalities,
and limits. It is up to you how to do it!</p>
<p>I am going to post a code snippet with a hidden misfunctionality. You can solve
that in any way as you like keeping the rules and limitations that I attach to
the snippet.</p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Beware of instanceof in equals</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-beware-of-instanceof-in-equals/</link>
			<pubDate>Wed, 31 Mar 2021 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-beware-of-instanceof-in-equals/</guid>
			<description>One of the most important methods is equals. So, it is also important how it is implemented.
What is the real issue with instanceof and equals? Let us see an implementation of it. First, let us introduce a simple class and its inheritant that demonstrate the usage of equals`.
public class Mug { private double capacity; // ctor, setter, getter  @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null) { return false; } if (!</description>
			<content type="html"><![CDATA[<p><strong>One of the most important methods is <code>equals</code>. So, it is also important how it
is implemented.</strong></p>
<p>What is the real issue with <code>instanceof</code> and <code>equals</code>? Let us see an implementation
of it. First, let us introduce a simple class and its inheritant that demonstrate
the usage of  equals`.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Mug</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">capacity</span><span class="o">;</span>

    <span class="c1">// ctor, setter, getter
</span><span class="c1"></span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Mug</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="n">Mug</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Mug</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="na">capacity</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">capacity</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Then we see as:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Mug</span> <span class="n">m1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mug</span><span class="o">(</span><span class="n">1</span><span class="o">.</span><span class="na">2</span><span class="o">);</span>
<span class="n">Mug</span> <span class="n">m2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mug</span><span class="o">(</span><span class="n">1</span><span class="o">.</span><span class="na">2</span><span class="o">);</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">m1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">m2</span><span class="o">));</span> <span class="c1">// true
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">m2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">m1</span><span class="o">));</span> <span class="c1">// true
</span></code></pre></div><p>What if there is an inheritant of <code>Mug</code>? How does <code>equals</code> work in that case?</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlasticMug</span> <span class="kd">extends</span> <span class="n">Mug</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">plastic</span><span class="o">;</span>

    <span class="c1">// ctor, setters, getters
</span><span class="c1"></span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">PlasticMug</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">PlasticMug</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">PlasticMug</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="na">getCapacity</span><span class="o">()</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">getCapacity</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">other</span><span class="o">.</span><span class="na">plastic</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">plastic</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>As seen above, let us apply the <code>equals</code> on the instances of <code>Mug</code> and <code>PlasticMug</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mug</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">plastic</span><span class="o">));</span> <span class="c1">// true
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">plastic</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mug</span><span class="o">));</span> <span class="c1">// false
</span></code></pre></div><p><code>instanceof</code> operator returns <code>true</code> if the type of the object is the same, or
inherited from the type on right. On the other side, <code>instanceof</code> never returns
<code>true</code> if the right operand is one of the parents of the type of the object
sitting on the left side of <code>instanceof</code>.</p>
<p>How can we fix it?</p>
<p><code>getClass()</code> method returns the exact class literal of the object whether its
static type is <code>Object</code>.</p>
<p>The <code>equals</code> method of <code>Mug</code>. <code>PlasticMug</code> is similar.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
 
    <span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="n">Mug</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Mug</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="na">capacity</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">capacity</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p>After changing the two implementations of <code>equals</code>, then the results look as
follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mug</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">plastic</span><span class="o">));</span> <span class="c1">// false 
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">plastic</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">mug</span><span class="o">));</span> <span class="c1">// false
</span></code></pre></div><p><strong>As previously said, beware of using <code>instanceof</code> in <code>equals</code>, and use <code>getClass()</code> method instead.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Hidden Keywords</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-hidden-keywords/</link>
			<pubDate>Mon, 29 Jun 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-hidden-keywords/</guid>
			<description>Java has a lot of keywords which are not used as identifiers or values.
Though, Java has a lot of keywords, some of them are less known or even not used. More over not used because they cannot be used at all.
The good old goto is one of the two. Since sequence, selection and iteration are enough for Turing machine, goto became unnecessarily, not to mention that understanding the code becomes hard to follow.</description>
			<content type="html"><![CDATA[<p><strong>Java has a lot of keywords which are not used as identifiers or values.</strong></p>
<p>Though, Java has a lot of keywords, some of them are less known or even not used.
More over not used because they cannot be used at all.</p>
<p>The good old <em>goto</em> is one of the two. Since sequence, selection and iteration are
enough for Turing machine, <em>goto</em> became unnecessarily, not to mention that
understanding the code becomes hard to follow.</p>
<p>The other one is <em>const</em> which hints that the value of a variable cannot be changed
after its initialization. But we already have a keyword for this, it is called <em>final</em>.</p>
<p><strong>Java has both goto and const, though, none of them are allowed to use.</strong></p>
<p>Java keywords can be found in <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">doc</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Records</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-records/</link>
			<pubDate>Mon, 25 May 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-records/</guid>
			<description>Java 15 introduces record type.
Records are a new kind of class in the Java language. The purpose of a record is to declare that a small group of variables is to be regarded as a new kind of entity. As said in JEP 384.
Simple data carrier classes contain too much boilerplate code compared to the data itself. Fields, getter, setters, ctors, toString, equals, hashCode. On the other hand, quite difficult to figure out what the class represents.</description>
			<content type="html"><![CDATA[<p><strong>Java 15 introduces record type.</strong></p>
<p><em>Records are a new kind of class in the Java language. The purpose of a record is
to declare that a small group of variables is to be regarded as a new kind of entity.</em>
As said in <em>JEP 384</em>.</p>
<p>Simple data carrier classes contain too much boilerplate code compared to the data
itself. Fields, getter, setters, ctors, <code>toString</code>, <code>equals</code>, <code>hashCode</code>.
On the other hand, quite difficult to figure out what the class represents.</p>
<p>The new approach looks like the following</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">record</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</code></pre></div><blockquote>
<p>This approach reminds me to data classes in Kotlin.</p>
</blockquote>
<p>Record represents an immutable class, that has a ctor with parameters. Also has
getters, and the classic three methods from <code>Object</code> that we override.</p>
<p>The type is <code>final</code> implicitly as well as the fields are.</p>
<p>Any <code>record</code> implicitly extends <code>java.lang.Record</code> and no explicit inheritance can be
applied on them, though record accepts interface implementations.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">record</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="n">Person</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="s">&#34;John Doe&#34;</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Person</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// ...
</span><span class="c1"></span>    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div><p><strong>Though, record is not intended to eliminate boilerplate code, these changes will decrease the code and make it more readable.</strong></p>
<p>Further reading about <a href="https://openjdk.java.net/jeps/384">JEP 384: Records</a></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Pattern Matching for instanceof</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-instanceof-pattern-matching/</link>
			<pubDate>Sat, 23 May 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-instanceof-pattern-matching/</guid>
			<description>Java 15 brings a syntactic sugar, called Pattern Matching for instanceof, with which we can shorten the code and make it more safe.
In prior versions of Java, the instanceof operator workes as follows:
Object o = &amp;#34;asdf&amp;#34;; if (o instanceof String) { String s = (String) o; System.out.println(o); } Java 15 - and Java 14 as a preview feature - introduces an enhanced instanceof operator, which brings the ability to cast the eximined instance to the type of the right operand.</description>
			<content type="html"><![CDATA[<p><strong>Java 15 brings a syntactic sugar, called <em>Pattern Matching for instanceof</em>, with which we
can shorten the code and make it more safe.</strong></p>
<p>In prior versions of Java, the <code>instanceof</code> operator workes as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="s">&#34;asdf&#34;</span><span class="o">;</span>

<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>Java 15 - and Java 14 as a preview feature - introduces an enhanced <code>instanceof</code> operator,
which brings the ability to cast the eximined instance to the type of the right operand.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="s">&#34;apple&#34;</span><span class="o">;</span>

<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">animals</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;cat&#34;</span><span class="o">,</span> <span class="s">&#34;dog&#34;</span><span class="o">);</span>

<span class="k">if</span> <span class="o">(</span><span class="n">animals</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><h4 id="scope">Scope</h4>
<p>Variable <code>s</code> is introduced in the scope of <code>if</code> statement, though it is not available
in <code>else</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="s">&#34;apple&#34;</span><span class="o">;</span>

<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="c1">// System.out.println(s); // does not compile, s is not known
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><h4 id="shadowing">Shadowing</h4>
<p>Once a variable - like <code>s</code> in the sample - is introduced on class or instance level,
then a variable with the same name introduced by <code>instanceof</code> can shadow the previous one
in <code>if</code> branching.</p>
<blockquote>
<p>That does not work with local variables!</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>

<span class="c1">// ...
</span><span class="c1"></span><span class="n">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="s">&#34;...&#34;</span><span class="o">;</span>

<span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="c1">// it does compile
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><blockquote>
<p>You can compile previews with <code>javac --enable-preview --release 14 Main.java</code>
and run with <code>java --enable-preview Main</code></p>
</blockquote>
<p><strong>I am realy looking forward instanceof operator with pattern matching.</strong></p>
<p>Further reading about <a href="https://openjdk.java.net/jeps/305">JEP 305: Pattern Matching for instanceof</a></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Immutable Object</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-immutable-object/</link>
			<pubDate>Sat, 16 May 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-immutable-object/</guid>
			<description>Couple of thoughts about how to implement immutable objects.
 Class has to be final. Fields have to be private and final. Hence, fields are set in constructor. No setters and setter-like methods. If object is passed in ctor parameter, make a clone of it.  Do the same in getters as well.    public final class Person { private final String name; private final int age; private final List&amp;lt;PhoneNumber&amp;gt; phoneNumbers; public Person(String name, int age, List&amp;lt;PhoneNumber&amp;gt; phoneNumbers) { this.</description>
			<content type="html"><![CDATA[<p><strong>Couple of thoughts about how to implement immutable objects.</strong></p>
<ol>
<li>Class has to be <code>final</code>.</li>
<li>Fields have to be <code>private</code> and <code>final</code>.</li>
<li>Hence, fields are set in constructor.</li>
<li>No setters and setter-like methods.</li>
<li>If object is passed in ctor parameter, make a clone of it.
<ul>
<li>Do the same in getters as well.</li>
</ul>
</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phoneNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">phoneNumbers</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="nf">getPhoneNumbers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">phoneNumbers</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><strong>Implementation steps of immutable object is a recurring question on technical interviews.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Helpful NullPointerExceptions</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-helpful-nullpointerexceptions/</link>
			<pubDate>Tue, 05 May 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-helpful-nullpointerexceptions/</guid>
			<description>Java 14 has brought a helpful feature with that we can get information about the source of the raised NullPointerException
NullPointerException is not very friendly and can occur anywhere. All the placed where we don&amp;rsquo;t want it to be. In this post I will show you how to track down its source.
The following source code is given:
String value = null; System.out.println(value.length()); Pre Java 14 Era The good old error message is the following:</description>
			<content type="html"><![CDATA[<p><strong>Java 14 has brought a helpful feature with that we can get information about
the source of the raised <code>NullPointerException</code></strong></p>
<p><code>NullPointerException</code> is not very friendly and can occur anywhere. All the
placed where we don&rsquo;t want it to be. In this post I will show you how to track
down its source.</p>
<p>The following source code is given:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</code></pre></div><h4 id="pre-java-14-era">Pre Java 14 Era</h4>
<p>The good old error message is the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">$ java NPEDemo                                        
Exception in thread &#34;main&#34; java.lang.NullPointerException
	at NPEDemo.main(NPEDemo.java:5)
</code></pre></div><h4 id="java-14-era">Java 14 Era</h4>
<p>A new command-line option was introduced, called <code>-XX:{+|-}ShowCodeDetailsInExceptionMessages</code>.
That is <code>false</code> by default, so detailed message won&rsquo;t be shown.</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">$ java -XX:+ShowCodeDetailsInExceptionMessages NPEDemo
Exception in thread &#34;main&#34; java.lang.NullPointerException: Cannot invoke &#34;String.length()&#34; because &#34;&lt;local1&gt;&#34; is null
	at NPEDemo.main(NPEDemo.java:5)
</code></pre></div><p>You can find more here: <a href="https://openjdk.java.net/jeps/358">JEP 358: Helpful NullPointerExceptions</a></p>
<p><strong>What a good feature has been brought by Java 14!</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Text Blocks</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-text-blocks/</link>
			<pubDate>Sun, 03 May 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-text-blocks/</guid>
			<description>Text blocks is a new proposed feature, hopefully coming with Java 15.
Until then, let us see how it looks like in Java 14 as a feature preview.
Here is how we declare a multiline string value. Once we have to concatenate, and also have to place new line characters (\n).
String text = &amp;#34;one line\n&amp;#34; + &amp;#34;and\n&amp;#34; + &amp;#34;another&amp;#34;; When text is printed out:
one line and another The new feature looks like the following.</description>
			<content type="html"><![CDATA[<p><strong>Text blocks is a new proposed feature, hopefully coming with Java 15.</strong></p>
<p>Until then, let us see how it looks like in Java 14 as a feature preview.</p>
<p>Here is how we declare a multiline string value. Once we have to concatenate,
and also have to place new line characters (<code>\n</code>).</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&#34;one line\n&#34;</span> <span class="o">+</span>
              <span class="s">&#34;and\n&#34;</span> <span class="o">+</span>
              <span class="s">&#34;another&#34;</span><span class="o">;</span>
</code></pre></div><p>When text is printed out:</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">one line
and
another
</code></pre></div><p>The new feature looks like the following. Much comfortabl compared to the one
which we can use nowadays.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&#34;&#34;&#34;
</span><span class="s">            one line
</span><span class="s">            and
</span><span class="s">            another
</span><span class="s">             &#34;&#34;&#34;</span><span class="o">;</span>
</code></pre></div><p>And the output is the same.</p>
<p>Things that we have to mention here. Since, this feature is preview, we have
to use <code>--enable-preview</code> and <code>--release 14</code> options with <code>javac</code>. Bear in mind
that indentation matters.</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">$ java --enable-preview --source 14 Main.java                 
Note: Main.java uses preview language features.
Note: Recompile with -Xlint:preview for details.
one line
and
another
</code></pre></div><p><strong>I am looking forward to seeing text block in Java! Hope, it will be shipped with Java 15.</strong></p>
<p>Further reading about <a href="https://openjdk.java.net/jeps/378">JEP 378: Text Blocks</a></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: I Need Dollars, Dollars, ...</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-i-need-dollars-dollars/</link>
			<pubDate>Sat, 02 May 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-i-need-dollars-dollars/</guid>
			<description>Some special characters are accepted as part of an identifier, dollar sign is among them.
Have you ever though about to write an application, whichever small that would be, and use as less identifier as possible.
And what if the identifier is weird itself already?
class $ { private String $; public void $(String $) { this.$ = $; } public String $() { return this.$; } } public class Main { public static void main(String[] args) { $ $ = new $(); $.</description>
			<content type="html"><![CDATA[<p><strong>Some special characters are accepted as part of an identifier, dollar sign is
among them.</strong></p>
<p>Have you ever though about to write an application, whichever small that would be,
and use as less identifier as possible.</p>
<p>And what if the identifier is weird itself already?</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">$</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">$</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">$</span><span class="o">(</span><span class="n">String</span> <span class="n">$</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">$</span> <span class="o">=</span> <span class="n">$</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">$</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">$</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">$</span> <span class="n">$</span> <span class="o">=</span> <span class="k">new</span> <span class="n">$</span><span class="o">();</span>
        <span class="n">$</span><span class="o">.</span><span class="na">$</span><span class="o">(</span><span class="s">&#34;$&#34;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">$</span><span class="o">.</span><span class="na">$</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><blockquote>
<p><code>_</code> works similar in pre Java 9 versions, and <code>__</code> works similar in Java 9 and onwards.</p>
</blockquote>
<p><strong><code>$</code> character is used as an identifier as many place as it is possible.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Less known side of Enums</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-less-known-side-of-enums/</link>
			<pubDate>Fri, 01 May 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-less-known-side-of-enums/</guid>
			<description>Enums are easy and straigthforward at first sight, but this type has some hidden sides.
public enum Day { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }  For enumeration type, Java has a keyword called enum. That was introduced in Java 1.5. All enum types are implicitly inhereted from Enum class.  Hence, all enum types has all methods that Enum has, like name, ordinal, etc. We cannot extend an enum, and enum does not extend custom types.</description>
			<content type="html"><![CDATA[<p><strong>Enums are easy and straigthforward at first sight, but this type has some
hidden sides.</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Day</span> <span class="o">{</span>
    <span class="n">MONDAY</span><span class="o">,</span> <span class="n">TUESDAY</span><span class="o">,</span> <span class="n">WEDNESDAY</span><span class="o">,</span> <span class="n">THURSDAY</span><span class="o">,</span> <span class="n">FRIDAY</span><span class="o">,</span> <span class="n">SATURDAY</span><span class="o">,</span> <span class="n">SUNDAY</span>
<span class="o">}</span>
</code></pre></div><ol>
<li>For enumeration type, Java has a keyword called <code>enum</code>.</li>
<li>That was introduced in Java 1.5.</li>
<li>All enum types are implicitly inhereted from <code>Enum</code> class.
<ul>
<li>Hence, all enum types has all methods that <code>Enum</code> has, like <code>name</code>, <code>ordinal</code>, etc.</li>
<li>We cannot extend an <code>enum</code>, and <code>enum</code> does not extend custom types.</li>
</ul>
</li>
<li>Enums constructor is not callable.</li>
<li>Though, it is not callable,
<ul>
<li><code>enum</code> has custom constructor,</li>
<li>constructor can be overridden,</li>
<li>constructor has to be <em>package-private</em> or <em>private</em>.</li>
</ul>
</li>
<li>Enums can be used in <em>switch statement</em>.</li>
<li>Enumeration values have an ordinal which represents its place in the enumeration, like an index.</li>
<li>All enums are <em>comparable</em>, since <code>Enum</code> implements <code>Comparable</code> interface, and <code>compareTo</code> is based on <code>ordinal</code>.</li>
<li>Two instances of an <code>enum</code> are always equivalent according to <code>==</code> and <code>equals</code> as well.</li>
<li>All methods except <code>toString</code> are <code>final</code> in <code>Enum</code>.
<ul>
<li>Cannot override them in our custom enumeration type.</li>
</ul>
</li>
<li>To get all values (instances) of an <code>enum</code>, we can use a <code>static</code> method, called <code>values</code>.
<ul>
<li>Not documented.</li>
<li>Gives values in the same order as they are declared.</li>
</ul>
</li>
<li>Recommended way to get a value based on <code>String</code> is <code>Enum.valueOf</code>
<ul>
<li><code>valueOf(String): T</code> method is also not documented, just mentioned in documentation of <code>Enum</code>.</li>
</ul>
</li>
</ol>
<h2 id="different-type-of-enums">Different type of enums</h2>
<h4 id="empty">Empty</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Empty</span> <span class="o">{</span>

<span class="o">}</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Empty</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">length</span><span class="o">);</span> <span class="c1">// =&gt; 0
</span></code></pre></div><h4 id="with-instances">With Instances</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Level</span> <span class="o">{</span>
    <span class="n">DEBUG</span><span class="o">,</span> <span class="n">INFO</span><span class="o">,</span> <span class="n">WARN</span><span class="o">,</span> <span class="n">ERROR</span><span class="o">,</span> <span class="n">FATAL</span> <span class="c1">//;
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p>Semicolon (<code>;</code>) is optional if enum does not have anything else just instances.</p>
<h4 id="with-method">With Method</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Level</span> <span class="o">{</span>
    <span class="n">DEBUG</span><span class="o">,</span> <span class="n">INFO</span><span class="o">,</span> <span class="n">WARN</span><span class="o">,</span> <span class="n">ERROR</span><span class="o">,</span> <span class="n">FATAL</span><span class="o">;</span> 

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// ...
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Here, semicolon is required at the end of the instances.</p>
<h4 id="order-of-instances">Order of Instances</h4>
<p>Order of instances are not important except one depends on another.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">NextOne</span> <span class="o">{</span>
    <span class="n">A</span><span class="o">(</span><span class="n">B</span><span class="o">),</span> <span class="n">B</span><span class="o">(</span><span class="n">C</span><span class="o">),</span> <span class="n">C</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>

    <span class="kd">private</span> <span class="n">NextOne</span> <span class="n">next</span><span class="o">;</span>

    <span class="n">NextOne</span><span class="o">(</span><span class="n">NextOne</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Compiler cannot inference that object <code>B</code> is an instance of <code>NextOne</code>. That means
the above code cannot compile.</p>
<h4 id="methods-overriding">Methods overriding</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Day</span> <span class="o">{</span>
    <span class="n">MONDAY</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">&#34;Just another manic Monday.&#34;</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">},</span> <span class="n">TUESDAY</span><span class="o">,</span> <span class="n">WEDNESDAY</span><span class="o">,</span> <span class="n">THURSDAY</span><span class="o">,</span> <span class="n">FRIDAY</span><span class="o">,</span> <span class="n">SATURDAY</span><span class="o">,</span> <span class="n">SUNDAY</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p>Further custom methods are also accepted in the block.</p>
<h4 id="abstract-methods">Abstract methods</h4>
<p><code>enum</code> can be extended with <code>abstact</code> methods, though we have to implement it in
the instances.</p>
<p><code>enum</code> also can implement interfaces.</p>
<h4 id="annotation">Annotation</h4>
<p>We can place annotations on it.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Author</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;jancsi&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="n">Day</span> <span class="o">{</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><h4 id="better-way-than-valueof">Better way than <code>valueOf</code></h4>
<p>As I have experienced, <code>valueOf</code> is far not the right method to get an <code>enum</code> instance
based on <code>String</code>. Its drawback is <code>valueOf</code> throws <code>IllegalArgumentException</code>.</p>
<p>Here is what I use if it is needed. It returns <code>null</code> if <code>String</code> param does not match.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">Day</span> <span class="nf">from</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">Day</span> <span class="n">day</span> <span class="o">:</span> <span class="n">Day</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">day</span><span class="o">.</span><span class="na">name</span><span class="o">().</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">day</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><blockquote>
<p><code>from</code>, <code>parse</code> also a good name! Use meaningful names!</p>
</blockquote>
<p><strong>In this post we have seen some less known features of enums.</strong></p>
<p>Documentation about enums are <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Enum.html">here</a>.</p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Easter Egg in C</title>
			<link>https://torokmark.github.io/posts/easter-egg-in-c/</link>
			<pubDate>Wed, 29 Apr 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/easter-egg-in-c/</guid>
			<description>What does the following code print out?
#include &amp;lt;stdio.h&amp;gt;#define _ F--&amp;gt;00||F-OO--; int F=00,OO=00;main(){F_OO();printf(&amp;#34;%1.3f\n&amp;#34;,4.*-F/OO/OO);}F_OO() { _-_-_-_ _-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_ _-_-_-_ } </description>
			<content type="html"><![CDATA[<p><strong>What does the following code print out?</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#define _ F--&gt;00||F-OO--;
</span><span class="cp"></span><span class="kt">int</span> <span class="n">F</span><span class="o">=</span><span class="mo">00</span><span class="p">,</span><span class="n">OO</span><span class="o">=</span><span class="mo">00</span><span class="p">;</span><span class="n">main</span><span class="p">(){</span><span class="n">F_OO</span><span class="p">();</span><span class="n">printf</span><span class="p">(</span><span class="s">&#34;%1.3f</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="mf">4.</span><span class="o">*-</span><span class="n">F</span><span class="o">/</span><span class="n">OO</span><span class="o">/</span><span class="n">OO</span><span class="p">);}</span><span class="n">F_OO</span><span class="p">()</span>
<span class="p">{</span>
            <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
       <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
    <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
  <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
 <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
 <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
<span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
<span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
<span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
<span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
 <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
 <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
  <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
    <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
        <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
            <span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="n">_</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Execute Shell Commands</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-execute-shell-commands/</link>
			<pubDate>Tue, 28 Apr 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-execute-shell-commands/</guid>
			<description>Two ways are shown here about how to execute shell scripts and commands with Java.
In this post I am showing two ways to execute shell scripts or shell commands from a Java app.
ProcessBuilder ProcessBuilder class has been created to create and handle operating system processes.
ProcessBuilder#start method creates a single native process. Let us see how to do it.
ProcessBuilder builder = new ProcessBuilder(); builder.command(&amp;#34;bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;ping google.com&amp;#34;); Process process; try { process = builder.</description>
			<content type="html"><![CDATA[<p><strong>Two ways are shown here about how to execute shell scripts and commands with Java.</strong></p>
<p>In this post I am showing two ways to execute shell scripts or shell commands from a Java app.</p>
<h4 id="processbuilder">ProcessBuilder</h4>
<p><code>ProcessBuilder</code> class has been created to create and handle operating system processes.</p>
<p><code>ProcessBuilder#start</code>  method creates a single native process. Let us see how to do it.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">ProcessBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProcessBuilder</span><span class="o">();</span>
<span class="n">builder</span><span class="o">.</span><span class="na">command</span><span class="o">(</span><span class="s">&#34;bash&#34;</span><span class="o">,</span> <span class="s">&#34;-c&#34;</span><span class="o">,</span> <span class="s">&#34;ping google.com&#34;</span><span class="o">);</span>

<span class="n">Process</span> <span class="n">process</span><span class="o">;</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">pid</span><span class="o">());</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div><h4 id="runtime">Runtime</h4>
<p>Another way to run a command is to use <code>Runtime#exec</code> method.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Process</span> <span class="n">process</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;ping google.com&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">pid</span><span class="o">());</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">isAlive</span><span class="o">());</span>
</code></pre></div><h4 id="output">Output</h4>
<p>Write the output of the command to the standard output</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">process</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">())))</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><strong>We can use <code>ProcessBuilder</code> and <code>Runtime#exec</code> to execute shell scripts and commands.</strong></p>
<p>You can find doc about <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/ProcessBuilder.html">ProcessBuilder</a><br>
You can find doc about <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Runtime.html">Runtime</a></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Daemon Thread</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-daemon-thread/</link>
			<pubDate>Sat, 25 Apr 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-daemon-thread/</guid>
			<description>Application terminates when all threads are terminated. But what if some of them run endlessly?
Sometimes threads run until a condition is met, sometimes they run endlessly.
Once a thread is created and then started, it runs parallel with the main execution. Our app terminates when all threads are terminated including our main method as well.
What if a thread is infinite and still running though the main is already terminated?</description>
			<content type="html"><![CDATA[<p><strong>Application terminates when all threads are terminated. But what if some of them run endlessly?</strong></p>
<p>Sometimes threads run until a condition is met, sometimes they run endlessly.</p>
<p>Once a thread is created and then started, it runs parallel with the main execution.
Our app terminates when all threads are terminated including our <code>main</code> method as well.</p>
<p>What if a thread is infinite and still running though the main is already terminated?</p>
<p>Let us see an example of that we have in our thread and how <code>main</code> looks like.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Daemon</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">++);</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">500</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Daemon</span><span class="o">();</span>
    <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;t started&#34;</span><span class="o">);</span>
    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">3500</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;ended&#34;</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>The output is as follows.</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">t started
0
...
6
ended
7
8
...
</code></pre></div><p>As we see, thread still runs after the <code>main</code> terminated. To change the behaviour of our app, let us set the thread to daemon.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Daemon</span><span class="o">();</span>
<span class="n">t</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="c1">// ...
</span></code></pre></div><p>And the output is:</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">t started
0
...
6
ended
</code></pre></div><p>What we should know about daemon threads:</p>
<ul>
<li>Thread is non-daemon by default</li>
<li>Thread can be set as daemon before start</li>
<li>JVM terminates when all remaining threads are terminated</li>
</ul>
<p><strong>If we want to terminate an infinite thread, we should set it as daemon.</strong></p>
<p>Documentation about <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Thread.html#setDaemon(boolean)">Daemon</a></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Use try-with-resource</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-try-with-resource/</link>
			<pubDate>Fri, 24 Apr 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-try-with-resource/</guid>
			<description>Try-with-resource gives a safer way to handle exceptions and resources.
A quite big drawback of try-catch-finally that we have to close resource at the end, otherwise the resource remains locked - not always, but sometimes!
So either we try not to forget to close the resouce, and place finally at the end, or apply something that does this job instead of us.
Try-Catch-Finally The hard part comes in finally, which encloses a try-catch, and null check is very easy to forget.</description>
			<content type="html"><![CDATA[<p><strong>Try-with-resource gives a safer way to handle exceptions and resources.</strong></p>
<p>A quite big drawback of <em>try-catch-finally</em> that we have to close resource at
the end, otherwise the resource remains locked - not always, but sometimes!</p>
<p>So either we try not to forget to close the resouce, and place finally at the end,
or apply something that does this job instead of us.</p>
<h4 id="try-catch-finally">Try-Catch-Finally</h4>
<p>The hard part comes in <code>finally</code>, which encloses a <em>try-catch</em>, and null check
is very easy to forget.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// has to be initialized
</span><span class="c1"></span><span class="k">try</span> <span class="o">{</span>
    <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">CharArrayReader</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()));</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>  <span class="c1">// try-catch
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// null-check comes handy!
</span><span class="c1"></span>            <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// to be handled or declared
</span><span class="c1"></span>        <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h4 id="try-with-resource">Try-With-Resource</h4>
<p>By using <em>try-with-resource</em>, we can take off this burden off our shoulders.
That is a much shorter and cleaner way to achieve the same without risking
that we leave resources unclosed and no need to check nulls either.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">CharArrayReader</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())))</span> <span class="o">{</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div><ol>
<li>No need to write <code>finally</code></li>
<li>Resource will be automatically closed (depends on the implementation)</li>
<li>Resource has to implement <code>AutoClosable</code> interface</li>
</ol>
<h4 id="autoclosable">AutoClosable</h4>
<p>What kinf of classes fit in the header of try-with-resource? Those, that implement <code>AutoClosable</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClosableResource</span> <span class="kd">implements</span> <span class="n">AutoCloseable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;closed!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><code>close</code> method is called automatically.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">try</span> <span class="o">(</span><span class="n">ClosableResource</span> <span class="n">cr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClosableResource</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(...)</span> <span class="o">{</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><h4 id="closable-vs-autoclosable">Closable vs AutoClosable</h4>
<p><code>AutoClosable</code> is the superinterface of <code>Closable</code>.</p>
<p>While <code>Closable#close</code> throws <code>IOException</code>, the <code>AutoClosable#close</code> throws exceptions
derived from <code>Exception</code>.</p>
<p>Doc of <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/AutoCloseable.html">AutoClosable</a><br>
Doc of <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/io/Closeable.html">Closable</a><br>
Further reading about <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">try-with-resource</a></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Catch Multiple Exceptions</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-catch-multiple-exceptions/</link>
			<pubDate>Wed, 25 Mar 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-catch-multiple-exceptions/</guid>
			<description>Catching multiple exceptions is very useful when we are intended to do the same operations when they are raised.
The feature introduced in Java 7 and by using it we can place exceptions in the same catch branch.
The old way looked like as follows.
try { } catch (SQLException ex) { logger.log(ex); } catch (RemoteException ex) { logger.log(ex); } catch (NullPointerException ex) { logger.log(ex); } In Java 7 and onwards, we can place multiple exceptions in one catch branch.</description>
			<content type="html"><![CDATA[<p><strong>Catching multiple exceptions is very useful when we are intended to do the same operations when they are raised.</strong></p>
<p>The feature introduced in Java 7 and by using it we can place exceptions in the same catch branch.</p>
<p>The old way looked like as follows.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">try</span> <span class="o">{</span>

<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NullPointerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>In Java 7 and onwards, we can place multiple exceptions in one catch branch.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">try</span> <span class="o">{</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="o">|</span> <span class="n">RemoteException</span> <span class="o">|</span> <span class="n">NullPointerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p><strong>Catching multiple exceptions helps us to avoid code duplications.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Instance from static launcher</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-static-launcher/</link>
			<pubDate>Tue, 18 Feb 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-static-launcher/</guid>
			<description>Instantiate the current class from its entry point by using static method. Interesting, isn&amp;rsquo;t it?
I came across with JavaFX recently, and I saw an example about how to use it. This made me think, and brought the following question in my mind. How can we make an instance of the class that is the starting point of our application and how can we call its instance methods.
Let us see the code that we have if we start building a javafx application.</description>
			<content type="html"><![CDATA[<p><strong>Instantiate the current class from its entry point by using static method. Interesting, isn&rsquo;t it?</strong></p>
<p>I came across with <em>JavaFX</em> recently, and I saw an example about how to use it. This made me think,
and brought the following question in my mind. How can we make an instance of the class that is
the starting point of our application and how can we call its instance methods.</p>
<p>Let us see the code that we have if we start building a <em>javafx</em> application.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Hello</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
   
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="o">{</span>
           
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>As it seems, <code>Application</code> has a <code>static</code> <code>launch</code> method and an instance level <code>start</code> method.
In <code>launch</code> method we have to call <code>start</code> somehow.</p>
<p>Here is one approach how to solve it.</p>
<ol>
<li>We should figure out where <code>launch</code> is called.</li>
<li>Instantiate the class.</li>
<li>Call <code>start</code> on that instance.</li>
</ol>
<h4 id="where-we-are-at">Where we are at.</h4>
<p>Stacktrace can be a good start to figure out which class where we are at.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="k">new</span> <span class="n">Throwable</span><span class="o">().</span><span class="na">getStackTrace</span><span class="o">()[</span><span class="n">1</span><span class="o">].</span><span class="na">getClassName</span><span class="o">();</span>
</code></pre></div><blockquote>
<p>Instance of <code>Throwable</code> is not thrown!
The index of <code>1</code> returns the caller as a <code>StackTraceElement</code> which will be <code>Hello</code> in our example.</p>
</blockquote>
<h4 id="instantiation">Instantiation</h4>
<p>Now, we know the name of our class. Reflection can help us to make an instance out of it.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">className</span><span class="o">).</span><span class="na">getDeclaredConstructor</span><span class="o">().</span><span class="na">newInstance</span><span class="o">();</span>
</code></pre></div><h4 id="call-start-method">Call <code>start</code> method</h4>
<p>As we get the instance, and cast it to <code>Application</code>. Thanks for dynamic binding,
called <code>start</code> method is the one that we implemented in the child class.</p>
<h4 id="put-together">Put together</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Throwable</span><span class="o">().</span><span class="na">getStackTrace</span><span class="o">()[</span><span class="n">1</span><span class="o">].</span><span class="na">getClassName</span><span class="o">();</span>
<span class="n">Application</span> <span class="n">app</span><span class="o">;</span>
<span class="n">app</span> <span class="o">=</span> <span class="o">(</span><span class="n">Application</span><span class="o">)</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">className</span><span class="o">).</span><span class="na">getDeclaredConstructor</span><span class="o">().</span><span class="na">newInstance</span><span class="o">();</span>
<span class="n">app</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div><p><a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Throwable.html">Java 13 doc : Throwable</a><br>
<a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/StackTraceElement.html">Java 13 doc : StackTraceElement</a><br>
<a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/Class.html">Java 13 doc : Class</a></p>
<p><strong>Stacktrace and reflection can be handy many times, as we saw here as well!</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: PECS</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-pecs/</link>
			<pubDate>Sat, 08 Feb 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-pecs/</guid>
			<description>Do you remember the rule of PECS? If not, read the post quickly!
PECS stands for Produce-Extend, Consume-Super. What does that mean? Let us see an example with types from the standard.
Object void add(List&amp;lt;Object&amp;gt; list) { list.add(&amp;#34;string&amp;#34;); list.add(1); } Passing the followings are:
add(new ArrayList&amp;lt;Object&amp;gt;()); // not type safe add(new ArrayList&amp;lt;String&amp;gt;()); // compile time error The first is not type safe, the second one does not compile, since ArrayList&amp;lt;String&amp;gt; is not the subtype of List&amp;lt;Object&amp;gt;.</description>
			<content type="html"><![CDATA[<p><strong>Do you remember the rule of PECS? If not, read the post quickly!</strong></p>
<p>PECS stands for <em>Produce-Extend, Consume-Super</em>. What does that mean? Let us see an example with types from the standard.</p>
<h4 id="object">Object</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;string&#34;</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><p>Passing the followings are:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;());</span> <span class="c1">// not type safe
</span><span class="c1"></span><span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;());</span> <span class="c1">// compile time error
</span></code></pre></div><p>The first is not type safe, the second one does not compile, since <code>ArrayList&lt;String&gt;</code> is not the subtype of <code>List&lt;Object&gt;</code>.</p>
<h4 id="wildcard">Wildcard</h4>
<p>Wildcard <code>?</code> brings the following.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;string&#34;</span><span class="o">);</span> <span class="c1">// compile time error
</span><span class="c1"></span>    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>  <span class="c1">// compile time error
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p>Though, <code>add</code> accepts both <code>ArrayList&lt;String&gt;</code> and <code>ArrayList&lt;Integer&gt;</code>, but not known what kind of parameter is passed during runtime,
so adding new elements to the list (writing the list) is not allowed.</p>
<h4 id="super-lower-bounded-wildcard">Super (Lower bounded wildcard)</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">number</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ol>
<li><code>? super T</code> accepts all types between <code>T</code> and <code>Object</code> on the hierarchy chain.</li>
<li><code>list</code> is writable, all values are accepted where <code>instanceof Number</code> returns <code>true</code>.</li>
<li><code>list</code> is considered non-readable, except the read value is <code>Object</code> because of type erasure.</li>
<li>We say that with <strong>super</strong>, new item is <strong>consumed</strong> by the list.</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;());</span> <span class="c1">// compile time error
</span><span class="c1"></span><span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;());</span> <span class="c1">// compile time error
</span><span class="c1"></span><span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;());</span>
<span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;());</span>
</code></pre></div><h4 id="extends-upper-bounded-wildcard">Extends (Upper bounded wildcard)</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> <span class="c1">// compile time error
</span><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">number</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><ol>
<li><code>? extends T</code> accepts all types that extends <code>Number</code>, like <code>Float</code>, <code>Double</code>, <code>Integer</code>, and <code>Number</code>.</li>
<li><code>list</code> is not writale, since <code>Object</code> is the only type which is known in runtime.</li>
<li><code>list</code> is readable, and the type of the return value can be anything between <code>Number</code> and <code>Object</code>.</li>
<li>We say that with <strong>extends</strong>, new item is <strong>produced</strong> from the list.</li>
</ol>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;());</span> 
<span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;());</span> <span class="c1">// compile time error
</span><span class="c1"></span><span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;());</span>
<span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;());</span> <span class="c1">// compile time error
</span></code></pre></div><p><strong>In this post we see how to use generic boundaries and what PECS is.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: JShell</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-jshell/</link>
			<pubDate>Sun, 05 Jan 2020 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-jshell/</guid>
			<description>JShell interpreter can process Java statements without requiring them to be placed in class and method body.
JShell interpreter and CLI were introduced in Java 9. That come handy when we would like to execute a statement, or call a subroutine to get their results.
Shell To enter the shell, we should type jshell in the command line and hit enter.
| Welcome to JShell -- Version 13 | For an introduction type: /help intro jshell&amp;gt; | Welcome to JShell -- Version 13 | For an introduction type: /help intro jshell&amp;gt; int i = 1 + 2; i ==&amp;gt; 3 jshell&amp;gt; System.</description>
			<content type="html"><![CDATA[<p><strong>JShell interpreter can process Java statements without requiring them to be
placed in class and method body.</strong></p>
<p>JShell interpreter and CLI were introduced in Java 9. That come handy when
we would like to execute a statement, or call a subroutine to get their results.</p>
<h3 id="shell">Shell</h3>
<p>To enter the shell, we should type <code>jshell</code> in the command line and hit enter.</p>
<pre><code>|  Welcome to JShell -- Version 13
|  For an introduction type: /help intro

jshell&gt;
</code></pre><pre><code>|  Welcome to JShell -- Version 13
|  For an introduction type: /help intro

jshell&gt; int i = 1 + 2;
i ==&gt; 3

jshell&gt; System.out.println(i);
3
</code></pre><h3 id="commands">Commands</h3>
<p>To see what else we can do with it, just type <code>/help</code> as it is hinted in the
header of the shell. We can check the imported types (<code>/imports</code>), or
types (<code>/types</code>), methods (<code>/methods</code>), variables (<code>/vars</code>). And we can
reset the shell as well (<code>/reset</code>).</p>
<p>Tab complition is also supported by jshell.</p>
<pre><code>jshell&gt; int i = 1 + 2
i ==&gt; 3

jshell&gt; /vars
|    int i = 3
</code></pre><p>Fortunately, no semicolon needed.</p>
<p><strong>As we see, Java 9 brought a Java shell, called JShell with which we can
execute statements without any boilerplate text.</strong></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Arrays as Generic Containers</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-arrays-as-generic-containers/</link>
			<pubDate>Sat, 28 Dec 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-arrays-as-generic-containers/</guid>
			<description>We can assign different type of elements to an array even the operation is accepted in compile-time, that raises error in run-time.
Sometimes Java is tricky, even it has static type system, we can assign different type of elements to an array, which is accepted in compile time, even array contains different type than the types of the element.
Covariance Let S &amp;lt;: T mean that S is subtype of T and covariant is S &amp;lt;: T =&amp;gt; S&#39; &amp;lt;: T&#39;.</description>
			<content type="html"><![CDATA[<p><strong>We can assign different type of elements to an array even the operation is accepted
in compile-time, that raises error in run-time.</strong></p>
<p>Sometimes Java is tricky, even it has static type system, we can assign
different type of elements to an array, which is accepted in compile time, even
array contains different type than the types of the element.</p>
<h3 id="covariance">Covariance</h3>
<p>Let <code>S &lt;: T</code> mean that <code>S</code> is subtype of <code>T</code> and <em>covariant</em> is <code>S &lt;: T =&gt; S' &lt;: T'</code>.</p>
<p>In Java, array subtyping is <em>covariant</em>, that means that type <code>S[]</code> is considered
to be a subtype of <code>T[]</code> whenever <code>S</code> is a subtype of <code>T</code>. Hence, <code>S &lt;: T =&gt; S[] &lt;: T[]</code>.</p>
<h3 id="how-it-works">How it works</h3>
<p>Since, <code>String &lt;: Object</code>, then <code>String[] &lt;: Object[]</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">fruit</span> <span class="o">=</span> <span class="s">&#34;apple&#34;</span><span class="o">;</span>
<span class="n">Object</span> <span class="n">tool</span> <span class="o">=</span> <span class="n">fruit</span><span class="o">;</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Object</span><span class="o">[]</span> <span class="n">tools</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;hammer&#34;</span><span class="o">,</span> <span class="s">&#34;screwdriver&#34;</span><span class="o">};</span>
<span class="n">String</span><span class="o">[]</span> <span class="n">fruits</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;apple&#34;</span><span class="o">,</span> <span class="s">&#34;plum&#34;</span><span class="o">};</span>

<span class="n">tools</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>  <span class="c1">// tools: type: Object[], value: {&#34;hammer&#34;, Integer(1)}
</span><span class="c1"></span>
<span class="n">tools</span> <span class="o">=</span> <span class="n">fruits</span><span class="o">;</span>  <span class="c1">// tools: type: String[], value: {&#34;apple&#34;, &#34;plum&#34;}
</span></code></pre></div><p>Here, <code>tools</code> is a reference to an array that contains <code>String</code> objects.
Since the static type of the elements in the array is <code>Object</code>, we can easily
assign new element to the array which type is either <code>Object</code> or one of its
subtype.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Object</span><span class="o">[]</span> <span class="n">tools</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;hammer&#34;</span><span class="o">,</span> <span class="s">&#34;screwdriver&#34;</span><span class="o">};</span>
<span class="n">String</span><span class="o">[]</span> <span class="n">fruits</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;apple&#34;</span><span class="o">,</span> <span class="s">&#34;plum&#34;</span><span class="o">};</span>

<span class="n">tools</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>  <span class="c1">// tools: type: Object[], value: {&#34;hammer&#34;, Integer(1)}
</span><span class="c1"></span>
<span class="n">tools</span> <span class="o">=</span> <span class="n">fruits</span><span class="o">;</span>  <span class="c1">// tools: type: String[], value: {&#34;apple&#34;, &#34;plum&#34;}
</span><span class="c1"></span>
<span class="n">tools</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Exception</span> <span class="n">in</span> <span class="n">thread</span> <span class="s">&#34;main&#34;</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ArrayStoreException</span><span class="o">:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Integer</span>
</code></pre></div><ul>
<li>Though, static type is <code>Object[]</code>, its dynamic type is <code>String[]</code></li>
<li>No compile time exception! Exception occured in runtime! It is way too late!</li>
</ul>
<p>Unfortunately, arrays as containers are not type-safe, and we, developers, have to
take the responsibility to make sure that read and write operations are type-safe.
It does not support rich functionality like <code>List</code>, <code>Set</code>, or <code>Queue</code> do, and
we are responsible to extend that if number of elements reach the capacity.</p>
<p><strong>Arrays as generic containers are not type-safe, and do not support type-safe
read and write operations in compie-time.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Parameter validation</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-parameter-validation/</link>
			<pubDate>Sat, 21 Dec 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-parameter-validation/</guid>
			<description>Checking method parameters is crutial to avoid inconvenient situations with null pointers or undesired values. Assertion and exception handling are two ways to give feedback to users about parameters.
What if we are intended to validate the parameters of a function? What if we liked to set up preconditions? How can we avoid working with null objects?
In this post we take a look at two approaches. At first, we see how we can check parameters with assertion and what its pros and cons are.</description>
			<content type="html"><![CDATA[<p><strong>Checking method parameters is crutial to avoid inconvenient situations with null
pointers or undesired values. Assertion and exception handling are two ways
to give feedback to users about parameters.</strong></p>
<p>What if we are intended to validate the parameters of a function? What if we
liked to set up preconditions? How can we avoid working with null objects?</p>
<p>In this post we take a look at two approaches. At first, we see how
we can check parameters with assertion and what its pros and cons are. Then we
see how to use exception handling for the same purpose.</p>
<h4 id="assertion">Assertion</h4>
<p>Java provides an <code>assert</code> keyword to use it against logical expressions as shown below.
The drawback of this approach is that assertion mechanism can be switched off
in runtime. What&rsquo;s more, switched off is the default state of asserts.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">assert</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">person</span> <span class="o">:</span> <span class="n">NULL_CHECK_MSG</span><span class="o">;</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p>So, once we want to use it, we have to execute <code>java</code> command with
<code>-enableassertions</code> or <code>-ea</code>:</p>
<pre><code>java -ea Main
</code></pre><p>If condition fails then <code>AssertionError</code> is raised.</p>
<h4 id="illegalargumentexception">IllegalArgumentException</h4>
<p>While assertions is switchable, we can disable that in runtime, exception
handling is completely part of the code with language level features
(inheritance, ctor, overloading, parameter passing).</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="n">NULL_CHECK_MSG</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><h4 id="objectsrequirenonnull">Objects.requireNonNull</h4>
<p>The best way to validate parameters against <code>null</code> is to use a solutions from
the standard edition or a framework.</p>
<p>Here is a solution among many of them.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">person</span><span class="o">,</span> <span class="s">&#34;person cannot be null&#34;</span><span class="o">);</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p>While assertion is switched off by default in runtime, exception is still part
of the language. While assertion is an error, <code>IllegalArgumentException</code> is
an exception. Never handle errors.</p>
<p><strong>As we see, favour exception over assertion.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Interview: Implement a HashMap-like data structure in Java</title>
			<link>https://torokmark.github.io/posts/interview-map/</link>
			<pubDate>Sun, 15 Dec 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/interview-map/</guid>
			<description>HashMap is one of the most used Map type in Java. A good experiment to implement our own one.
Not so long ago, I took a sit in an interview, and the interviewer asked me to implement a HashMap-like container which contains Integer types keys and Integer values. The trick was that I could not use any containers from the Collection API framework.
Steps we have to consider:
 Basic API for our map!</description>
			<content type="html"><![CDATA[<p><strong>HashMap is one of the most used Map type in Java. A good experiment to
implement our own one.</strong></p>
<p>Not so long ago, I took a sit in an interview, and the interviewer asked me to
implement a HashMap-like container which contains <code>Integer</code> types keys and
Integer values. The trick was that I could not use any containers from the Collection API
framework.</p>
<p>Steps we have to consider:</p>
<ul>
<li>Basic API for our map!</li>
<li>Usage of <code>equals</code> and <code>hashCode</code></li>
<li>Our map has to be (not just) memory efficient</li>
</ul>
<p>How to make it very flexible? If we used array we have to extend it continously
and copy values when we remove one element. How to deal with buckets? Is that
realy necessary? If so, how to implement that? Should it be a linked list as
well?</p>
<p>One of the most important points was to make it extensible as much as possible.
My approach was to implement buckets as a linked data structure and the
key-value pairs inside buckets are linked data structures as well.</p>
<p>The <code>Bucket</code> class looks as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Bucket</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">hashCode</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="n">head</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Bucket</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Bucket</span><span class="o">(</span><span class="kt">int</span> <span class="n">hashCode</span><span class="o">,</span> <span class="n">Bucket</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">hashCode</span> <span class="o">=</span> <span class="n">hashCode</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>And the <code>Node</code> class is like:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Key</span> <span class="n">key</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Value</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">Value</span> <span class="n">value</span><span class="o">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="o">}</span>
</code></pre></div><p>Both <code>LinkedMap</code> and <code>Bucket</code> have a <code>head</code> field that points to the last
inserted element or last created bucket.</p>
<h4 id="put">Put</h4>
<p>Once we want to put a new key-value pair into the map, first, we check whether
the bucket exists. If so, we use put method of the bucket, otherwise we have to
create a new one, chain that up to the <code>head</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// LinkedMap#put
</span><span class="c1"></span><span class="kd">public</span> <span class="n">Value</span> <span class="nf">put</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">Value</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">NullPointerException</span><span class="o">(</span><span class="s">&#34;Key cannot be null!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">Bucket</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="n">bucket</span> <span class="o">=</span> <span class="n">findBucketByHashCode</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">bucket</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bucket</span> <span class="o">=</span> <span class="n">insertBucketByHashCode</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">bucket</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Bucket#put
</span><span class="c1"></span><span class="kd">public</span> <span class="n">Value</span> <span class="nf">put</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">Value</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">NullPointerException</span><span class="o">(</span><span class="s">&#34;Key cannot be null!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">Node</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="n">currentNode</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">currentNode</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">currentNode</span><span class="o">.</span><span class="na">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">currentNode</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">currentNode</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">currentNode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">currentNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Value</span><span class="o">&gt;(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">head</span><span class="o">);</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">currentNode</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">currentNode</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div><p><code>get</code> and <code>remove</code> methods are similar.</p>
<p><strong>In this post we see how to implement a LinkedMap data structure.</strong></p>
<p>Code can be found: <a href="https://gist.github.com/torokmark/06940b90482955fee18a6462350a2f09">https://gist.github.com/torokmark/06940b90482955fee18a6462350a2f09</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: One more more more time</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-one-more-more-more-time/</link>
			<pubDate>Mon, 18 Nov 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-one-more-more-more-time/</guid>
			<description>Operators have arity. Sometimes we can make patterns out of them. Which is funny.
Every operator has an arity in Java. They can be either unary, binary, and ternary operators. Arity decides how many operands are accepted in the operation. This brings us the next riddle.
The Riddle What is the output of the next operation?
class Main { public static void main(String[] args) { int n = 0; int i = 1; n = i + + + + + + i; System.</description>
			<content type="html"><![CDATA[<p><strong>Operators have arity. Sometimes we can make patterns out of them. Which is funny.</strong></p>
<p>Every operator has an arity in Java. They can be either unary, binary, and ternary operators.
Arity decides how many operands are accepted in the operation. This brings us the next riddle.</p>
<h3 id="the-riddle">The Riddle</h3>
<p>What is the output of the next operation?</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> 
        <span class="n">n</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="o">+</span> <span class="o">+</span> <span class="o">+</span> <span class="o">+</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>A few of the operators have two arities, they can be both unary and binary operators.
Plus (<code>+</code>) and minus (<code>-</code>) operators are both unary and binary operators.</p>
<p>Once we start playing them, we find more interesting and funnier operations than pluses.
What if we mix two of them?</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">n</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="o">-</span> <span class="o">+</span> <span class="o">-</span> <span class="o">+</span> <span class="o">-</span> <span class="n">i</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</code></pre></div><p>Obviously, those operators that are not unary and binary at the same time, cannot work this way.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">n</span> <span class="o">=</span> <span class="n">2</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span> <span class="n">i</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="n">b</span> <span class="o">=</span> <span class="kc">true</span> <span class="o">!</span> <span class="o">!</span> <span class="o">!</span> <span class="o">!</span> <span class="o">!</span> <span class="o">!</span> <span class="o">!</span> <span class="kc">false</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</code></pre></div><p><strong>In this post we see how funny if an operator has more than one arity.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Underscore as identifier</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-underscore-as-identifier/</link>
			<pubDate>Mon, 28 Oct 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-underscore-as-identifier/</guid>
			<description>We could use underscore as a variable name until Java 7, but it cannot be used as an identifier from Java 9 and upwards.
Java has strict rules about how to name a variable, which characters are accepted in it or which one can be the first one. Underscore is a legal character among alphabetic characters and numbers. What if I did not use any other chars just underscore? Is that still valid variable name?</description>
			<content type="html"><![CDATA[<p><strong>We could use underscore as a variable name until Java 7, but it cannot be
used as an identifier from Java 9 and upwards.</strong></p>
<p>Java has strict rules about how to name a variable, which characters are accepted in it
or which one can be the first one. Underscore is a legal character among alphabetic
characters and numbers. What if I did not use any other chars just underscore?
Is that still valid variable name? Let us see what the compiler says.</p>
<h3 id="single-underscore">Single Underscore</h3>
<p>The source looks as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">_</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">_</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><strong>Java 7</strong></p>
<p>We get the following result of the compilation of the above code with Java 7.</p>
<pre><code>
</code></pre><p>Yep! It is empty without any warnings!</p>
<p><strong>Java 9</strong></p>
<p>If we compile the code with Java 9, the result looks like:</p>
<pre><code>error: as of release 9, '_' is a keyword, and may not be used as an identifier
</code></pre><p>It seems as <code>_</code> was introduced as a keyword in Java 9. We cannot use it as a variable name.</p>
<h3 id="multiple-underscores">Multiple Underscores</h3>
<p>What if we put multiple underscores next to each other?</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">__</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">__</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><strong>Java 7</strong></p>
<p>Compiling the above code with Java 7, we get very similar to the previous one. No warnings again!</p>
<p><strong>Java 9</strong></p>
<p>The result of the compilation here in case of Java 9 is more interesting.
Though we get error if we use single underscore, but it compiles swimmingly if identifier consits of multiple underscores.</p>
<p><strong>Though we cannot use single underscore from Java 9 as variable name, we still have the opportunity to use
multiple underscores concatenated next one another as an identifier.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Ruby-like struct in Python #2</title>
			<link>https://torokmark.github.io/posts/python-struct-2/</link>
			<pubDate>Sat, 26 Oct 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/python-struct-2/</guid>
			<description>Ruby provides a very handy type called OpenStruct to create objects. It brings the opportunity to add fields to objects during the runtime. Here is its Python counterpart.
In the previous post I showed Struct from esu which helps creating new types with fields and methods. That has a sibling, called OpenStruct which helps creating objects on the fly.
Usage Ruby&amp;rsquo;s OpenStruct (doc:2.6.5) inspired it, and it looks as follows.</description>
			<content type="html"><![CDATA[<p><strong>Ruby provides a very handy type called OpenStruct to create objects. It brings
the opportunity to add fields to objects during the runtime. Here is its Python
counterpart.</strong></p>
<p>In the previous post I showed <code>Struct</code> from <em>esu</em> which helps creating new types
with fields and methods. That has a sibling, called <code>OpenStruct</code> which helps
creating objects on the fly.</p>
<h3 id="usage">Usage</h3>
<p>Ruby&rsquo;s OpenStruct (<a href="https://ruby-doc.org/stdlib-2.6.5/libdoc/ostruct/rdoc/OpenStruct.html">doc:2.6.5</a>)
inspired it, and it looks as follows.</p>
<p>We have two ways to declare fields. One way is to pass a dict to the ctor, where
keys are the fields, while values are values assigned to the given field.</p>
<p>We can introduce fields as referencing them by using dot-notation.</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">esu</span> <span class="kn">import</span> <span class="n">OpenStruct</span>

<span class="n">bob</span> <span class="o">=</span> <span class="n">OpenStruct</span><span class="p">()</span>
<span class="n">bob</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">Bob</span>
<span class="n">bob</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">54</span>
<span class="k">print</span><span class="p">(</span><span class="n">bob</span><span class="p">)</span> <span class="c1"># =&gt; [name=Bob, age=54]</span>

<span class="n">su</span> <span class="o">=</span> <span class="n">OpenStruct</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;Su&#39;</span><span class="p">,</span> <span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;female&#39;</span><span class="p">})</span>
<span class="n">su</span><span class="o">.</span><span class="n">employed</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">print</span><span class="p">(</span><span class="n">su</span><span class="p">)</span> <span class="c1"># =&gt; [name=Su, gender=female, employed=True]</span>
</code></pre></div><h3 id="implementation">Implementation</h3>
<p>How can we reference fields without they would be declared previously?</p>
<p>Python provides <code>__getattr__(self, name)</code> and <code>__setattr__(self, name, value)</code>
methods which are called when a field or a method is referenced or called.
Getter is called when field or method is read while setter is called when those
two are written.</p>
<p><strong>In this post we saw another struct type from esu, called OpenStruct. Enjoy
using it!</strong></p>
<p>You can find the repository fo the package here: <a href="https://github.com/torokmark/esu">https://github.com/torokmark/esu</a><br>
The pip package can be found here: <a href="https://pypi.org/project/esu">https://pypi.org/project/esu</a><br>
The documentation is here: <a href="https://esu.readthedocs.io">https://esu.readthedocs.io</a></p>
]]></content>
		</item>
		
		<item>
			<title>Ruby-like struct in Python</title>
			<link>https://torokmark.github.io/posts/python-struct/</link>
			<pubDate>Sat, 19 Oct 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/python-struct/</guid>
			<description>Ruby provides a very flexible way to create new types with certain fields with Struct. Though Python does not have this functionality naturally, with esu package we can do the same.
Ruby types have rich API which is brought by the design, and the language features as well. Even though Python is very dynamic and flexible as well, some of the features are lacking in the languages.
In this post I would like to show you a Python package, name is esu, which brings a struct that can provide almost the same functionality.</description>
			<content type="html"><![CDATA[<p><strong>Ruby provides a very flexible way to create new types with certain fields with
Struct. Though Python does not have this functionality naturally, with <em>esu</em>
package we can do the same.</strong></p>
<p>Ruby types have rich API which is brought by the design, and the language
features as well. Even though Python is very dynamic and flexible as well, some
of the features are lacking in the languages.</p>
<p>In this post I would like to show you a Python package, name is <strong>esu</strong>, which
brings a <em>struct</em> that can provide almost the same functionality.</p>
<h3 id="usage">Usage</h3>
<p>Ruby&rsquo;s Struct (<a href="https://ruby-doc.org/core-2.6.5/Struct.html">doc:2.6.5</a>) looks
as follows. This brings the goal how our one should look like.</p>
<div class="highlight"><pre class="chroma"><code class="language-rb" data-lang="rb"><span class="no">Customer</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:address</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">def</span> <span class="nf">greeting</span>
    <span class="s2">&#34;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&#34;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">dave</span> <span class="o">=</span> <span class="no">Customer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&#34;Dave&#34;</span><span class="p">,</span> <span class="s2">&#34;123 Main&#34;</span><span class="p">)</span>
<span class="n">dave</span><span class="o">.</span><span class="n">name</span>     <span class="c1">#=&gt; &#34;Dave&#34;</span>
<span class="n">dave</span><span class="o">.</span><span class="n">greeting</span> <span class="c1">#=&gt; &#34;Hello Dave!&#34;</span>
</code></pre></div><p>Here is beneath <code>Struct</code> type provided by <em>esu</em>. As we see in case of Ruby,
field names and methods can be passed to <code>Struct</code> in Python as well.</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">esu</span> <span class="kn">import</span> <span class="n">Struct</span>

<span class="n">Customer</span> <span class="o">=</span> <span class="n">Struct</span><span class="p">(</span>
        <span class="s1">&#39;Customer&#39;</span><span class="p">,</span>
        <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;address&#39;</span><span class="p">,</span>
        <span class="n">methods</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;greeting&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="s2">&#34;Hello {}&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
        <span class="p">})</span>

<span class="n">dave</span> <span class="o">=</span> <span class="n">Customer</span><span class="p">()</span>
<span class="n">dave</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Dave&#39;</span>
<span class="n">dave</span><span class="o">.</span><span class="n">greeting</span><span class="p">()</span> <span class="c1"># =&gt; Hello Dave</span>

<span class="n">anna</span> <span class="o">=</span> <span class="n">Customer</span><span class="p">(</span><span class="s1">&#39;Anna&#39;</span><span class="p">,</span> <span class="s1">&#39;432 Avenue&#39;</span><span class="p">)</span>
<span class="n">anna</span><span class="o">.</span><span class="n">greeting</span><span class="p">()</span> <span class="c1"># =&gt; Hello Anna</span>
</code></pre></div><h3 id="implementation">Implementation</h3>
<p>Metaprogramming is a very handy and efficient tool when we are intended to build
types, extend classes with fields and methods during the runtime. Python
provides good support on this.</p>
<p>Python provides a function, called <code>type</code> (<a href="https://docs.python.org/3/library/functions.html#type">doc:3.8</a>),
that creates new types based on the parameter passed to it.</p>
<p>The first parameter is the name of the new type, which is passed as the first param of
<code>Struct</code>. The second param of <code>type</code> is the parent type, here we take the good
old <code>object</code>, and finally the dictionary of the fields, where fieldname is the
key and, as we do not have values to them, we set their values to <code>None</code> as
default.</p>
<h4 id="fields">Fields</h4>
<p>List of fields can be defined in the ctor of <code>Struct</code>. That accepts as many
fields as we want to. These names will be available as members of the instance
created from the new type.</p>
<h4 id="methods">Methods</h4>
<p>Methods can be passed as a named parameter of <code>Struct</code>&rsquo;s ctor for <code>methods</code>
parameter. It is a <code>dict</code>, method name is the key, while the lambda expression
is the body of the method.</p>
<p>The lambda expression has to have one argument at least, that will be the <em>self
reference</em>. To get access to the fields or other methods, we have to use
<code>__dict__</code> member of self, and giving the name of the member as key on
<code>__dict__</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">methods</span><span class="o">=</span><span class="p">{</span>
    <span class="s1">&#39;greeting&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="bp">self</span><span class="p">:</span> <span class="s2">&#34;Hello {}&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div><p>Unfortunately, lambda is not as expressive as block statement in Ruby. Though,
there are workarounds to achieve multiline statements, it is quite unconvinient.
If we liked to do that, it would be a better way to define method previously and
pass them in place of the lambda expression.</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">greeting</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c1"># multiline comes here...</span>
    <span class="c1"># and here ...</span>
    <span class="k">return</span> <span class="s2">&#34;Hello {}&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>

<span class="n">methods</span><span class="o">=</span><span class="p">{</span>
    <span class="s1">&#39;greeting&#39;</span><span class="p">:</span> <span class="n">greeting</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h4 id="ctor">Ctor</h4>
<p>The newly created type&rsquo;s ctor accepts the values of the fields in the same order
as we defined the fieldnames. If non-args is given, all the fields have the
default <code>None</code> value. If args is just partially given, <code>ValueError</code> exception is
raised.</p>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="n">dave</span> <span class="o">=</span> <span class="n">Customer</span><span class="p">()</span>
<span class="n">dave</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Dave&#39;</span>
<span class="n">dave</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">54</span>

<span class="n">bob</span> <span class="o">=</span> <span class="n">Customer</span><span class="p">(</span><span class="s1">&#39;Bob&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">bob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># =&gt; Bob</span>
</code></pre></div><h4 id="basic-functionality">Basic functionality</h4>
<p>There are some methods, which I consider useful and important enough to add them
to the newly created type.</p>
<ul>
<li>ctor itself,</li>
<li><code>__eq__</code> to compare two instances,</li>
<li><code>__hash__</code> to compute the hash value of an instance,</li>
<li><code>__str__</code> to provide a string representation of the instance,</li>
<li><code>__len__</code>, which returns the number of fields,</li>
<li><code>members</code> returns the tuple of fieldnames</li>
<li><code>values</code> returns the tuple of values in the order of fieldnames.</li>
</ul>
<p>All of them can be overwritten if the appropriate method is passed to the
<code>Struct</code>.</p>
<p><strong>In this post we saw a Python package which brings the flexible functionality
that Ruby&rsquo;s Struct brings for us. Enjoy using it!</strong></p>
<p>You can find the repository fo the package here: <a href="https://github.com/torokmark/esu">https://github.com/torokmark/esu</a><br>
The pip package can be found here: <a href="https://pypi.org/project/esu">https://pypi.org/project/esu</a><br>
The documentation is here: <a href="https://esu.readthedocs.io">https://esu.readthedocs.io</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Varargs as Entry Point Parameter</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-varargs-in-entry-point/</link>
			<pubDate>Tue, 15 Oct 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-varargs-in-entry-point/</guid>
			<description>Java 5 was one of those versions that brought much more features and syntactic sugars than any other of them. Varargs is one of those. This provides a very comfortable way to pass different number of arguments to a method. Can we use it anywhere?
Varargs is just a syntactic sugar, it can be used in a more flexible way than its predecessor, the typed array. It has the same characteristics which means it supports indexing, it has an attribute called length, it is iterable.</description>
			<content type="html"><![CDATA[<p><strong>Java 5 was one of those versions that brought much more features and syntactic sugars
than any other of them.
Varargs is one of those. This provides a very comfortable way to pass different
number of arguments to a method. Can we use it anywhere?</strong></p>
<p>Varargs is just a syntactic sugar, it can be used in a more flexible way than its
predecessor, the typed array. It has the same characteristics which means
it supports indexing, it has an attribute called <code>length</code>, it is iterable.</p>
<h4 id="the-usual-one">The Usual One</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arg</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h4 id="varargs">Varargs</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">arg</span><span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arg</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>As mentioned that varargs is more flexible than its predecessor which means parameter
passing is much easier. We do not have to deal with array creation and instantiation.
On the other side, method with varargs parameter also accepts typed array.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">basket</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">,</span> <span class="s">&#34;grape&#34;</span><span class="o">,</span> <span class="s">&#34;plum&#34;</span><span class="o">,</span> <span class="s">&#34;pear&#34;</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;apple&#34;</span><span class="o">,</span> <span class="s">&#34;orange&#34;</span><span class="o">,</span> <span class="s">&#34;lime&#34;</span><span class="o">,</span> <span class="s">&#34;lemon&#34;</span><span class="o">};</span>
        <span class="n">basket</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">basket</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
       <span class="c1">// ...
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><strong>Though varargs looks unusual, it is also available for parameter passing
in <code>main</code> method since it works exactly at the same way how array works.
Plus, it helps us passing different number of arguments without creating a new array.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Underscores in Numeric Literals</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-underscores-in-numeric-literals/</link>
			<pubDate>Thu, 05 Sep 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-underscores-in-numeric-literals/</guid>
			<description>Underscore can be used in numeric literals to group digits in a numeric value. This way that can enhance code readability, decrease mistyping and helps visually keeping numeric values in range.
Code readability is one of the most important viewpoints of software development. The more readable the code is, the faster that can be understood by developers.
Java 7 introduced underscore as a comfortable way to separate digits of a numeric value into groups.</description>
			<content type="html"><![CDATA[<p><strong>Underscore can be used in numeric literals to group digits in a numeric value.
This way that can enhance code readability, decrease mistyping and helps visually
keeping numeric values in range.</strong></p>
<p>Code readability is one of the most important viewpoints of software development.
The more readable the code is, the faster that can be understood by developers.<br>
Java 7 introduced underscore as a comfortable way to separate digits of a numeric value
into groups.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">____j</span> <span class="o">=</span> <span class="n">0x5_4</span><span class="o">;</span>
<span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="n">1_2_7</span><span class="o">;</span>
<span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="n">32_767</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1_000_000</span><span class="o">;</span>
<span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="n">1_000_000_000_000L</span><span class="o">;</span>
<span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="n">1_000</span><span class="o">.</span><span class="na">5f</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="n">1_000</span><span class="o">.</span><span class="na">5d</span><span class="o">;</span>
</code></pre></div><p>Naming a few limitations:</p>
<ul>
<li>If value is prefixed with underscore(s) then that is identifier: <code>int j = _10;</code></li>
<li>Underscore is not allowed to be at the end: <code>int j = 10_;</code></li>
<li>Code does not compile if underscore is before or after <code>x</code> in hex values: <code>int j = 0_x_10;</code></li>
<li>Code also does not compile if underscore is after leading zero of octal values: <code>int j = 0_10;</code></li>
<li>Underscore is not allowed to be before or after dot in <code>float</code> or <code>double</code> values: <code>double d = 1._234d;</code></li>
<li>If underscore is immediately before the type suffix like <code>f</code>, <code>d</code> or <code>L</code>: <code>double d = 1.234_d;</code></li>
</ul>
<p><strong>Underscore helps separating digits into groups, thus make long values more readable.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Single Source File Code</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-single-source-file-code/</link>
			<pubDate>Wed, 28 Aug 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-single-source-file-code/</guid>
			<description>Java 11 introduced a new way of executing applications. That gives us the opportunity to do it without excplicitely compiling it. What&amp;rsquo;s more, Java code can be run as a script.
In Java, compilation and execution of an app are two different steps. The java command gives us the feeling that we work with an interpreter.
The Pre-Java-11 era Compilation of the source code and execution of the app are separated commands before Java 11, as we see here:</description>
			<content type="html"><![CDATA[<p><strong>Java 11 introduced a new way of executing applications. That gives us the
opportunity to do it without excplicitely compiling it. What&rsquo;s more, Java code
can be run as a script.</strong></p>
<p>In Java, compilation and execution of an app are two different steps.
The <code>java</code> command gives us the feeling that we work with an interpreter.</p>
<h4 id="the-pre-java-11-era">The Pre-Java-11 era</h4>
<p>Compilation of the source code and execution of the app are separated commands
before Java 11, as we see here:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ javac Hello.java
$ java Hello
Hello World!
</code></pre></div><h4 id="the-java-11-era">The Java 11 era</h4>
<p>Java 11 compiles the code and then executes it in one step, though it does not
generate <code>.class</code> file.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ java Hello.java
Hello World!
</code></pre></div><p>Java is strongly engaged to backward compatibility, hence, to use this <em>one-step</em>
approach with other versions as well, we can use <code>--source</code> option to specify
which version we are inteded to use.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ java Hello.java --source <span class="m">9</span>
Hello World!
</code></pre></div><p>Good old jars are used in the same way as they have been used previously:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ java -cp guava-28.0-jre.jar HelloList.java
</code></pre></div><h4 id="shebang">Shebang</h4>
<p>Shell scripts start with a commented line at the beginning of the file, in general.
This commented line holds information to the executor about interpreter and its
location. It can be <em>bash</em>, <em>python</em>, <em>ruby</em>, <em>perl</em>, you can name it.</p>
<p>Java also can provide this functionality to execute applications.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/java --source 11
</span><span class="cp"></span>
class Shebang <span class="o">{</span>
    public static void main<span class="o">(</span>String<span class="o">[]</span> args<span class="o">)</span> <span class="o">{</span>
        System.out.println<span class="o">(</span><span class="s2">&#34;Shebangs! Shebangs!&#34;</span><span class="o">)</span><span class="p">;</span>
        System.out.println<span class="o">(</span><span class="s2">&#34;Num of arguments: &#34;</span> + args.length<span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>I have to mention the followings:</p>
<ul>
<li>the source file has to be executable. To achieve this, execute <code>chmod +x Shebang</code> or <code>chmod 744 Shebang</code>,</li>
<li>extension has to be nothing, <code>.sh</code> or some other, <code>.exe</code> is also good choice but not <code>.java</code>,</li>
<li><code>--source</code> option is mandatory here, otherwise <code>ClassNotFoundException</code> exception is raised,</li>
<li>with this option we can define which Java version we are intended to use.</li>
</ul>
<p><strong>Java 11 has brought a lot of funny features like <code>java</code> command can compile and execute
the source file in one step. Source code is executable when shebang is on the top.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Ruby&#39;s or operator precedence</title>
			<link>https://torokmark.github.io/posts/rubys-or-operator-precedence/</link>
			<pubDate>Fri, 23 Aug 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/rubys-or-operator-precedence/</guid>
			<description>Operators have precedence and sometimes they can give us hard time to figure out why our code works as it does.
Ruby has three or operators, |, ||, and the readable or. All of them have different precedences. That is, the precedence, that makes some trouble if we do not care about which one we use.
The evaluation of logical operators are left-associative, that means the far left operator is evaluated at first, than its result will be the left operand of the next operator and so on.</description>
			<content type="html"><![CDATA[<p><strong>Operators have precedence and sometimes they can give us hard time to figure
out why our code works as it does.</strong></p>
<p>Ruby has three <em>or</em> operators, <code>|</code>, <code>||</code>, and the readable <code>or</code>. All of them
have different precedences. That is, the precedence, that makes some trouble if
we do not care about which one we use.</p>
<p>The evaluation of logical operators are left-associative, that means the far left
operator is evaluated at first, than its result will be the left operand of the
next operator and so on. <code>|</code> operator evaluates both operands, while <code>||</code> or <code>or</code>
are short-circuit operators.</p>
<p>There are two falsy values in the language, <code>false</code> and <code>nil</code>, anything else belong
to the truthy set. <code>|</code> operator works as expected and returns logical values.</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="kp">false</span> <span class="o">|</span> <span class="kp">nil</span>  <span class="c1"># false</span>
<span class="nb">puts</span> <span class="kp">true</span> <span class="o">|</span> <span class="kp">nil</span>   <span class="c1"># true</span>
<span class="nb">puts</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">2</span>   <span class="c1"># true</span>
<span class="nb">puts</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span>   <span class="c1"># false, here 3 is consider as an int value, not a logical value  </span>
</code></pre></div><p>In case of <code>||</code> and <code>or</code> operators returned value is not logical, as it would be in case of <code>|</code>.
Nothing has suprised us!</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="mi">3</span>  <span class="c1"># 3</span>
<span class="nb">puts</span> <span class="mi">3</span> <span class="o">||</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">2</span>  <span class="c1"># true</span>
<span class="nb">puts</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">or</span> <span class="mi">3</span>  <span class="c1"># 3</span>
<span class="nb">puts</span> <span class="mi">3</span> <span class="ow">or</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">2</span>  <span class="c1"># true</span>
</code></pre></div><p>Let us see a bit more complex example and examine the results. Since both <code>||</code>
and <code>or</code> are lazy operators, if left-hand side operand is true, the right-hand
side operand won&rsquo;t be evaluated, hence we understand why empty string is
emitted instead of <code>3</code> in place of <code>b</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="s2">&#34;|| &#39;</span><span class="si">#{</span> <span class="n">a</span> <span class="si">}</span><span class="s2">&#39; &#39;</span><span class="si">#{</span> <span class="n">b</span> <span class="si">}</span><span class="s2">&#39;&#34;</span>  <span class="c1"># || &#39;2&#39; &#39;&#39;</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="ow">or</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="s2">&#34;or &#39;</span><span class="si">#{</span> <span class="n">a</span> <span class="si">}</span><span class="s2">&#39; &#39;</span><span class="si">#{</span> <span class="n">b</span> <span class="si">}</span><span class="s2">&#39;&#34;</span>  <span class="c1"># or &#39;2&#39; &#39;&#39;</span>
</code></pre></div><p>What if the right-hand side operator is also evaluated, since the result of the
expression is <code>false</code> on the left.</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">a</span> <span class="o">=</span> <span class="kp">false</span> <span class="o">||</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="s2">&#34;|| &#39;</span><span class="si">#{</span> <span class="n">a</span> <span class="si">}</span><span class="s2">&#39; &#39;</span><span class="si">#{</span> <span class="n">b</span> <span class="si">}</span><span class="s2">&#39;&#34;</span>  <span class="c1"># || &#39;3&#39; &#39;3&#39;</span>
<span class="n">a</span> <span class="o">=</span> <span class="kp">false</span> <span class="ow">or</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span>  
<span class="nb">puts</span> <span class="s2">&#34;or &#39;</span><span class="si">#{</span> <span class="n">a</span> <span class="si">}</span><span class="s2">&#39; &#39;</span><span class="si">#{</span> <span class="n">b</span> <span class="si">}</span><span class="s2">&#39;&#34;</span>  <span class="c1"># or &#39;false&#39; &#39;3&#39;</span>
</code></pre></div><p>Uhh, quite wierd results. Not just they are different, but the value of <code>a</code> is
the same as the value of <code>b</code>. Where is <code>false</code>?</p>
<p>The trick is that the precedence of <code>||</code> is higher than the precedence of <code>=</code> (assign),
but the precedence of <code>=</code> is higher than the precedence of <code>or</code>.</p>
<p>According to the abovementioned lines, the evaluation of <code>||</code> looks as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kp">false</span> <span class="o">||</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span> 
<span class="n">a</span> <span class="o">=</span> <span class="p">(</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">)</span> 
<span class="n">a</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></div><p><em>And</em> operators, like <code>&amp;</code>, <code>&amp;&amp;</code>, and <code>and</code>, work similar.</p>
<p><strong>As we see the precedence of operators can cause a big mess if we are not circumspect enough.
Though, if it is possible, use <code>||</code> operator and be careful.</strong></p>
<p>Sample can be found: <a href="https://gist.github.com/torokmark/8347c58f0cda918e99cb43fba84aea81">https://gist.github.com/torokmark/8347c58f0cda918e99cb43fba84aea81</a></p>
]]></content>
		</item>
		
		<item>
			<title>Container types in shell script</title>
			<link>https://torokmark.github.io/posts/container-types-in-shell-script/</link>
			<pubDate>Thu, 15 Aug 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/container-types-in-shell-script/</guid>
			<description>Shell script does not support container types like map, set, or queue, though with a third-party lib, presented here, we can use them in our scripts.
From time to time we need map, queue or any other kind of collections during our work. Shell script is definitely not the right choice to write applications but it may happen that we need some of the previously mentioned types to help our work.</description>
			<content type="html"><![CDATA[<p><strong>Shell script does not support container types like map, set, or queue, though
with a third-party lib, presented here, we can use them in our scripts.</strong></p>
<p>From time to time we need <em>map</em>, <em>queue</em> or any other kind of collections during
our work. Shell script is definitely not the right choice to write applications
but it may happen that we need some of the previously mentioned types to help
our work.</p>
<p>Though shell script weakly supports types at all, we can use <em>queues</em>, <em>stacks</em>,
<em>maps</em> in an easy, readable, and maintanable way. In this post I present a module
that can provide these functionalities to us. And we still in shell script.</p>
<h3 id="container-types">Container Types</h3>
<p>All types are collection types, like <code>map</code>, <code>queue</code>, <code>stack</code> or <code>set</code> or as we
call it <code>aggregate</code> since <code>set</code> is a built-in function.</p>
<h4 id="map">Map</h4>
<p>Map provides a container over key-value pairs with well-known methods.</p>
<p>As a usage, see below:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">source</span> <span class="s1">&#39;map.sh&#39;</span>

map create fruits
map add fruits apple <span class="m">2</span> <span class="c1"># where apple is key and 2 is value</span>
map size fruits <span class="c1"># returns 1</span>
map get fruits apple <span class="c1"># 2</span>
map values fruits <span class="c1"># 2</span>
</code></pre></div><p>Map&rsquo;s API: <a href="https://github.com/torokmark/utils.sh/wiki/Map">https://github.com/torokmark/utils.sh/wiki/Map</a></p>
<h4 id="aggregate">Aggregate</h4>
<p>Aggregate is none other than the classic set. All elements are unique in this
datastructure.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">source</span> <span class="s1">&#39;aggregate.sh&#39;</span>

aggregate add fruits apple
aggregate add fruits apple
aggregate size fruits <span class="c1"># 1</span>
aggregate empty fruits <span class="c1"># false</span>

aggregate contains fruits vegetables union_set
aggregate intersection fruits vegetables intersection_set
aggregate difference fruits vegetables

aggregate destroy fruits
</code></pre></div><p>Aggregate&rsquo;s API: <a href="https://github.com/torokmark/utils.sh/wiki/Aggregate">https://github.com/torokmark/utils.sh/wiki/Aggregate</a></p>
<h4 id="stack">Stack</h4>
<p>Stack is a classic LIFO datastructure with its well-known methods.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">source</span> <span class="s1">&#39;stack.sh&#39;</span>

stack create fruits
stack push fruits apple
stack push fruits pear
stack size fruits <span class="c1"># 2</span>
stack top fruits <span class="c1"># pear</span>
stack empty fruits <span class="c1"># false</span>
stack destroy fruits
</code></pre></div><p>Stack&rsquo;s API: <a href="https://github.com/torokmark/utils.sh/wiki/Stack">https://github.com/torokmark/utils.sh/wiki/Stack</a></p>
<h4 id="queue">Queue</h4>
<p>Queue is a FIFO datastructure with appropriate methods to put, remove data or
destroy the queue itself.</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">source</span> <span class="s1">&#39;queue.sh&#39;</span>
<span class="c1"># I create a queue called fruits</span>
queue create fruits
<span class="c1"># put an element to queue</span>
queue enqueue fruits apple
queue peek fruits
queue destroy fruits
</code></pre></div><p>Queue&rsquo;s API: <a href="https://github.com/torokmark/utils.sh/wiki/Queue">https://github.com/torokmark/utils.sh/wiki/Queue</a></p>
<p>Source code is available here: <a href="https://github.com/torokmark/utils.sh">https://github.com/torokmark/utils.sh</a><br>
Github page is avaliable here: <a href="https://torokmark.github.io/utils.sh">https://torokmark.github.io/utils.sh</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Entry Point in Interface or Enum</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-entry-point-in-interface/</link>
			<pubDate>Fri, 09 Aug 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-entry-point-in-interface/</guid>
			<description>All Java applications start with a class and an entry point in it. We can change the class type to others.
All Java applications start at one common point. That is a class which has at least one static method, called main as an entry point of the app. This method is called by JRE after the class is loaded when we execute java command with the appropriate name of the class.</description>
			<content type="html"><![CDATA[<p><strong>All Java applications start with a class and an entry point in it.
We can change the class type to others.</strong></p>
<p>All Java applications start at one common point. That is a class which has at
least one static method, called <code>main</code> as an entry point of the app.
This method is called by JRE after the class is loaded when we execute
<code>java</code> command with the appropriate name of the class.</p>
<p>Java has more than just primitive types and class types. There are interfaces,
enums, different kind of reference types. Is it possible to use other types
in the place of class to make the entry point available for JRE for calling it?</p>
<h4 id="the-usual-way">The usual way</h4>
<p>A well-known <em>Hello World</em> looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello World!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>After executing it, <code>Hello World!</code> is printed to the standard output.</p>
<h4 id="interface">Interface</h4>
<p>We have more choice than just a class to place code in it.
Thank to Java 8 and onwards, interface is available to place static method in it.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">interface</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello Interface!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>JRE calls the entry point as <code>Main.main(...)</code> without caring about the kind of <code>Main</code>.
After the binary got executed, <code>Hello Interface!</code> pops up on the std out.</p>
<h4 id="enum">Enum</h4>
<p><code>enum</code> is also a class type, with some extras. All types that are defined as <code>enum</code>
implicitly inhereted from <code>Enum</code> special class.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">enum</span> <span class="n">Main</span> <span class="o">{</span>
    <span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello Enum!&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p><code>enum</code> requires to have a semicolon (<code>;</code>) at least if we have methods in the <code>enum</code>.
It prints <code>Hello Enum!</code> to std out after we executed the <code>java Main</code> command.</p>
<h4 id="compare-them">Compare them</h4>
<p>The most common type where we place the entry point is definitely <strong>class</strong> type.
Though class is very tempting to put a constructor and then instanciate the class
inside the entry point. Grrhh! Do not do that! Keep it as clean as possible!
Let <code>Main</code> be as a container of <code>main</code> method and that&rsquo;s it!</p>
<p><strong>Interface</strong> does not allow us to define a constructor inside and instanciate it in
<code>main</code> method. Obviously, it could be as an anonymous inner class, but also ugly.
Hope, that is ugly enough for developers to not to do that. Definitely that is a code smell.</p>
<p><strong>Enum</strong> brings the need to introduce at least one object with makes the code botched.
Totally superfluous and misleading, hence <code>enum</code> is also not the choosen one.</p>
<p><strong>Though I would go for interface, since it seems as the safest and less tempting for further
code mish-mashing. On the other side this approach can be very misleading for
those developers who are new in the world of Java 8.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Safe navigation in languages</title>
			<link>https://torokmark.github.io/posts/safe-navigation-in-languages/</link>
			<pubDate>Mon, 05 Aug 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/safe-navigation-in-languages/</guid>
			<description>As we saw in the previous post, Ruby development team introduced a safe navigation operator to get rid of painful chaining of objects, which could raise NPE in case of null object in the middle. But Ruby is not the only language that came up with this idea. Most of the languages have introduced this operator, usually called null propagation, or some other approaches to achieve the same goal.
In this post I write some snippets to demonstrate what other languages provide to prevent the exception raised by referencing to a null object.</description>
			<content type="html"><![CDATA[<p><strong>As we saw in the previous post, Ruby development team introduced a safe
navigation operator to get rid of painful chaining of objects, which
could raise NPE in case of null object in the middle.
But Ruby is not the only language that came up with this idea. Most of the
languages have introduced this operator, usually called null propagation,
or some other approaches to achieve the same goal.</strong></p>
<p>In this post I write some snippets to demonstrate what other languages provide
to prevent the exception raised by referencing to a null object.</p>
<p>Demonstration of the core problem again, comes below:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Person</span> <span class="n">john</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&#34;John&#34;</span><span class="o">,</span> <span class="n">54</span><span class="o">,</span> <span class="k">new</span> <span class="n">Address</span><span class="o">(</span><span class="s">&#34;Paris&#34;</span><span class="o">,</span> <span class="s">&#34;Champs-Elysee&#34;</span><span class="o">,</span> <span class="n">54</span><span class="o">));</span>
<span class="n">Person</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&#34;Joe&#34;</span><span class="o">,</span> <span class="n">54</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">john</span><span class="o">.</span><span class="na">getAddress</span><span class="o">().</span><span class="na">getStreet</span><span class="o">());</span> <span class="c1">// emits the street name
</span><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getAddress</span><span class="o">().</span><span class="na">getStreet</span><span class="o">());</span> <span class="c1">// raises NPE
</span></code></pre></div><p>And in case of hash, the same problem looks like that:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;</span> <span class="n">hsh</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;();</span>

<span class="c1">// ... add some pairs
</span><span class="c1"></span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hsh</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;London&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">));</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hsh</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;Paris&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">));</span> <span class="c1">// raises NPE
</span></code></pre></div><p>For testing I used a <code>Person</code> object which embeds an <code>Address</code> object which
has some fields. I would like to get back the value of a field in the embedded
object through the instance of <code>Person</code>.</p>
<h3 id="java">Java</h3>
<p>Java 8 introduced <code>Optional</code> type and method references. Combining these two
we can safely traverse over the embedded objects without fearing to get NPE.</p>
<p>If one of the values is null, it returns <code>'N/A'</code> by default.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">street</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">john</span><span class="o">)</span>
        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Person</span><span class="o">::</span><span class="n">getAddress</span><span class="o">)</span>
        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Address</span><span class="o">::</span><span class="n">getStreet</span><span class="o">)</span>
        <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&#34;N/A&#34;</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">street</span><span class="o">);</span>
    <span class="n">street</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">joe</span><span class="o">)</span>
        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Person</span><span class="o">::</span><span class="n">getAddress</span><span class="o">)</span>
        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Address</span><span class="o">::</span><span class="n">getStreet</span><span class="o">)</span>
        <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&#34;N/A&#34;</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">street</span><span class="o">);</span>
</code></pre></div><p>In Java 8, a very handy method of <code>Map</code> got introduced, called <code>getOrDefault</code>.
In case of it looks like as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hsh</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="s">&#34;London&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()).</span><span class="na">getOrDefault</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">,</span> <span class="o">-</span><span class="n">1</span><span class="o">));</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hsh</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="s">&#34;Paris&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()).</span><span class="na">getOrDefault</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">,</span> <span class="o">-</span><span class="n">1</span><span class="o">));</span>
</code></pre></div><h3 id="groovy">Groovy</h3>
<p>Groovy brings safe navigation operator as part of the language.</p>
<div class="highlight"><pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">john</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s2">&#34;john&#34;</span><span class="o">,</span> <span class="mi">54</span><span class="o">,</span> <span class="k">new</span> <span class="n">Address</span><span class="o">(</span><span class="s2">&#34;London&#34;</span><span class="o">,</span> <span class="s2">&#34;Baker&#34;</span><span class="o">,</span> <span class="mi">221</span><span class="o">))</span>
<span class="n">println</span><span class="o">(</span><span class="n">john</span><span class="o">.</span><span class="na">address</span><span class="o">.</span><span class="na">street</span><span class="o">)</span> <span class="c1">// Baker
</span><span class="c1"></span><span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s2">&#34;joe&#34;</span><span class="o">,</span> <span class="mi">54</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>
<span class="n">println</span><span class="o">(</span><span class="n">joe</span><span class="o">?.</span><span class="na">address</span><span class="o">?.</span><span class="na">street</span><span class="o">)</span> <span class="c1">// though address is null it is not raising NPE
</span></code></pre></div><p>Here there are two options, one would go for <code>getAt</code> and null propagation
operator (<code>?.</code> ) is applied on the returned object. Unfortunately it does
not return a default object. <code>get</code> method returns its second parameter if key
does not exist.</p>
<div class="highlight"><pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="n">println</span><span class="o">(</span><span class="n">cities</span><span class="o">.</span><span class="na">getAt</span><span class="o">(</span><span class="s1">&#39;Paris&#39;</span><span class="o">)?.</span><span class="na">getAt</span><span class="o">(</span><span class="s1">&#39;joe&#39;</span><span class="o">)?.</span><span class="na">getAt</span><span class="o">(</span><span class="s1">&#39;age&#39;</span><span class="o">))</span>
<span class="n">println</span><span class="o">(</span><span class="n">cities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s1">&#39;Paris&#39;</span><span class="o">,</span> <span class="o">[:]).</span><span class="na">get</span><span class="o">(</span><span class="s1">&#39;joe&#39;</span><span class="o">,</span> <span class="o">[:]).</span><span class="na">get</span><span class="o">(</span><span class="s1">&#39;age&#39;</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</code></pre></div><h3 id="python">Python</h3>
<p>Python does not support null propagation on embedded objects, but it supports
returning default values if key does not exist in the dictionary.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">cities</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;London&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;joe&#39;</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">cities</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Paris&#39;</span><span class="p">,</span> <span class="p">{})</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;joe&#39;</span><span class="p">,</span> <span class="s1">&#39;N/A&#39;</span><span class="p">))</span>
</code></pre></div><h3 id="c">C#</h3>
<p>Safe navigation in C# looks like:</p>
<div class="highlight"><pre class="chroma"><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">john</span><span class="p">?.</span><span class="n">Address</span><span class="p">?.</span><span class="n">Street</span> <span class="p">??</span> <span class="s">&#34;Portobello&#34;</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">joe</span><span class="p">?.</span><span class="n">Address</span><span class="p">?.</span><span class="n">Street</span> <span class="p">??</span> <span class="s">&#34;Portobello&#34;</span><span class="p">);</span>
</code></pre></div><p>The <code>??</code> operator ensures that in case of null or falsy value, the printed text
will be the right operand.</p>
<p>Though C# provides <code>TryGetValue</code>  which can be used for getting default values,
though it is not available for chaining.</p>
<h3 id="javascript">Javascript</h3>
<p>Both the dot notation and index support are available in Javascript to read
fields of an object. Since objects acts as a dictionary, index support can be
used to reach fields.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(((</span><span class="nx">joe</span> <span class="o">||</span> <span class="p">{}).</span><span class="nx">address</span> <span class="o">||</span> <span class="p">{}).</span><span class="nx">street</span> <span class="o">||</span> <span class="s1">&#39;Portobello&#39;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(((</span><span class="nx">joe</span> <span class="o">||</span> <span class="p">{})[</span><span class="s1">&#39;address&#39;</span><span class="p">]</span> <span class="o">||</span> <span class="p">{})[</span><span class="s1">&#39;street&#39;</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;Portobello&#39;</span> <span class="p">)</span>
</code></pre></div><p><strong>In this post we have got some ideas how to handle null propagation in
different languages.</strong></p>
<p><em>I took the latest versions of the languages. If you are awaire of additional
solutions either in these languages or in others, feel free to fork-add-pr!</em></p>
<p>Codes can be found: <a href="https://github.com/torokmark/safe-navigation-in-languages">https://github.com/torokmark/safe-navigation-in-languages</a></p>
]]></content>
		</item>
		
		<item>
			<title>Benchmarking Ruby Control Flows and Datastructures</title>
			<link>https://torokmark.github.io/posts/ruby-benchmark-control-flows/</link>
			<pubDate>Sat, 03 Aug 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/ruby-benchmark-control-flows/</guid>
			<description>Flexibility of Ruby brings many ways to achieve the same results, whether it is a loop, selection of elements from datastructures, or assignment of values.
Performance is one of the major metrics of an application. Ruby provides a module, natively brought by the language, called Benchmark, which helps us to observe the code and reflects the potential bottlenecks.
Sometimes that is very suprising which statement executes faster and which of them provides less performance.</description>
			<content type="html"><![CDATA[<p><strong>Flexibility of Ruby brings many ways to achieve the same results, whether it
is a loop, selection of elements from datastructures, or assignment of values.</strong></p>
<p>Performance is one of the major metrics of an application. Ruby provides a module,
natively brought by the language, called <strong>Benchmark</strong>, which helps us
to observe the code and reflects the potential bottlenecks.</p>
<p>Sometimes that is very suprising which statement executes faster and which of them provides less performance.
In this post I present some results of benchmarked codes, operators,
searching, hash, array manipulations, which I consider suprising or unexpected.</p>
<h4 id="which-one-is-faster">Which one is faster?</h4>
<ol>
<li>Object nil check: <code>unless obj</code> though <code>.nil?</code> is nicer and readable</li>
<li>For looping: <code>while</code> or <code>until</code></li>
<li>Array creation: <code>[]</code> is unbeatable</li>
<li>Array with values: <code>(...).to_a</code> is the fastest</li>
<li>Array emptyness check: <code>.empty?</code> is much faster than <code>arr == []</code></li>
<li>For extending an array: <code>+</code> is faster than <code>concat</code></li>
<li>Iterate over a sorted array and compare its elements is faster than the same with an unsorted array</li>
<li><code>{}</code> is faster than <code>new</code></li>
<li>In case of <code>Hash</code> use <code>.empty?</code> to check emptyness, and readable as well</li>
<li>For adding new element <code>[]</code> and <code>store</code> are almost the same, <code>merge</code> is far slowest</li>
<li>Iterate over a <code>Hash</code>, get the keys first by <code>.keys</code> faster than <code>each</code>, <code>each_keys</code> or <code>each_pair</code></li>
<li>For selecting elements, use <code>keep_if</code> or <code>delete_if</code>, they are almost on the same performance. <code>select</code> is slow</li>
<li>Check whether a key exists, use <code>[]</code>. <code>.has_key?</code> is far slower</li>
<li>Empty string assign is the faster string initialization, compared to <code>new</code> or <code>new('')</code></li>
<li>Checking whether a string ends with a specific value: <code>end_with?</code> much faster than <code>=~</code> or <code>match</code></li>
<li><code>include?</code> is also faster than <code>=~</code> or <code>match</code></li>
</ol>
<p>Not saying all the time you should use the fastest, code readability is the most
important. Prefer clean code rather than nanosecond faster code.</p>
<p>Take a look at all benchmarked snippets that are available here:<br>
<a href="https://github.com/torokmark/ruby-benchmark">https://github.com/torokmark/ruby-benchmark</a></p>
<p>For further reading about the module:<br>
<a href="https://ruby-doc.org/stdlib-2.5.3/libdoc/benchmark/rdoc/Benchmark.html">https://ruby-doc.org/stdlib-2.5.3/libdoc/benchmark/rdoc/Benchmark.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>Do you know Java: Double Brace Initialization</title>
			<link>https://torokmark.github.io/posts/do-you-know-java-double-brace-initialization/</link>
			<pubDate>Sun, 28 Jul 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/do-you-know-java-double-brace-initialization/</guid>
			<description>Double brace initialization is a very comfortable way to add values to a collection or pairs to a map instance instead of having multiple statements next to each other.
One of the most popular languages, though Java is full of interesting parts that look wierd or unusual at first glance. In the sequence I call Do you know Java, I would like to present these less known or unexplained parts of the languages.</description>
			<content type="html"><![CDATA[<p><strong>Double brace initialization is a very comfortable way to add values to a collection
or pairs to a map instance instead of having multiple statements next to each other.</strong></p>
<p>One of the most popular languages, though Java is full of interesting parts
that look wierd or unusual at first glance. In the sequence I call <em>Do you know Java</em>,
I would like to present these less known or unexplained parts of the languages.</p>
<h4 id="the-usual-way">The usual way</h4>
<p>Usually to initialize a collection or a map we do:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">,</span> <span class="n">2</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;melon&#34;</span><span class="o">,</span> <span class="n">5</span><span class="o">);</span>
</code></pre></div><h4 id="double-braces">Double Braces</h4>
<p>Double brace initialization brings the opportunity to do this at the so-called same time.</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{{</span>
  <span class="n">put</span><span class="o">(</span><span class="s">&#34;apple&#34;</span><span class="o">,</span> <span class="n">2</span><span class="o">);</span>
  <span class="n">put</span><span class="o">(</span><span class="s">&#34;melon&#34;</span><span class="o">,</span> <span class="n">5</span><span class="o">);</span>
<span class="o">}};</span>
</code></pre></div><h4 id="how-it-works">How it works</h4>
<p>Inner braces belong to the init block of the anonymous class derived from <code>HashMap</code>.
Its <code>put</code> method is called on the <code>super</code> of our <code>map</code> object.</p>
<p><strong>Double brace initialization is a form of adding elements to a collection at initilization time.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/do-you-know-java">https://github.com/torokmark/do-you-know-java</a></p>
]]></content>
		</item>
		
		<item>
			<title>Safe navigation in Ruby</title>
			<link>https://torokmark.github.io/posts/safe-navigation-in-ruby/</link>
			<pubDate>Mon, 17 Jun 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/safe-navigation-in-ruby/</guid>
			<description>Navigation through embedded objects can suprise us with an error if one of the fields, which are objects as well, is null. We are in the same situation if we have a hash object and want to get a value by key if key does not exist. The burning situation crops up if we chain up methods next to each other.
In this post I write some approaches, how to keep our code still clean, readable and safe if we liked to chain up calls next one another on an object or on a key-value pair container.</description>
			<content type="html"><![CDATA[<p><strong>Navigation through embedded objects can suprise us with an error if one of the
fields, which are objects as well, is null. We are in the same situation if we
have a hash object and want to get a value by key if key does not exist.
The burning situation crops up if we chain up methods next to each other.</strong></p>
<p>In this post I write some approaches, how to keep our code still
clean, readable and safe if we liked to chain up calls next one another on an
object or on a key-value pair container.</p>
<p>Demonstration of the core problem comes below:</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="no">Address</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:city</span><span class="p">,</span> <span class="ss">:street</span><span class="p">,</span> <span class="ss">:number</span><span class="p">)</span>
<span class="no">Person</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:address</span><span class="p">)</span>

<span class="n">people</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">people</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;jancsi&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="no">Address</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;City&#39;</span><span class="p">,</span> <span class="s1">&#39;somewhere over the rainbow&#39;</span><span class="p">,</span> <span class="s1">&#39;42&#39;</span><span class="p">))</span>
<span class="n">people</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;jancsi&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>

<span class="n">people</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
	<span class="nb">p</span> <span class="n">person</span><span class="o">.</span><span class="n">address</span><span class="o">.</span><span class="n">street</span>
<span class="k">end</span>
<span class="c1"># =&gt; &#39;somewhere over the rainbow&#39;</span>
<span class="c1"># =&gt; `&lt;main&gt;&#39;: undefined method `street&#39; for nil:NilClass (NoMethodError)</span>
</code></pre></div><p>And in case of hash, the same problem looks like that:</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">animals</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
<span class="n">animals</span><span class="o">[</span><span class="s1">&#39;mammals&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;even-toed&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;giraffe&#39;</span><span class="p">}</span>                                 
<span class="n">animals</span><span class="o">[</span><span class="s1">&#39;reptiles&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;snakes&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s1">&#39;cobra&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;king cobra&#39;</span><span class="p">,</span> <span class="s1">&#39;tree cobra&#39;</span><span class="o">]</span><span class="p">}</span> <span class="p">}</span>

<span class="o">[</span><span class="s1">&#39;mammals&#39;</span><span class="p">,</span> <span class="s1">&#39;reptiles&#39;</span><span class="p">,</span> <span class="s1">&#39;birds&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
  <span class="nb">p</span> <span class="n">animals</span><span class="o">[</span><span class="n">key</span><span class="o">][</span><span class="s1">&#39;snakes&#39;</span><span class="o">]</span>
<span class="k">end</span>
<span class="c1"># =&gt; nil</span>
<span class="c1"># =&gt; {&#34;cobra&#34;=&gt;[&#34;king cobra&#34;, &#34;tree cobra&#34;]}</span>
<span class="c1"># =&gt; Traceback (most recent call last):</span>
<span class="c1"># ...</span>
<span class="c1"># =&gt; navigation.rb:29:in `block in &lt;main&gt;&#39;: undefined method `[]&#39; for nil:NilClass (NoMethodError)</span>
</code></pre></div><h3 id="solution-in-ruby">Solution in Ruby</h3>
<p>Ruby introduced the safe navigation operator <code>&amp;</code> in version 2.3, with which we
can handle null objects.</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">people</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
	<span class="nb">p</span> <span class="n">person</span><span class="o">&amp;.</span><span class="n">address</span><span class="o">&amp;.</span><span class="n">street</span>
<span class="k">end</span>
<span class="c1"># =&gt; &#34;somewhere over the rainbow&#34;</span>
<span class="c1"># =&gt; nil</span>
</code></pre></div><p>What if we liked to get a value based on its key and chaining the indices next one another.
If one of the key is missing, indexing would be applied against a null object.
Furtonately, the <code>||</code> operator comes handy.</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">p</span> <span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="s1">&#39;mammals&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="p">{})</span><span class="o">[</span><span class="s1">&#39;snakes&#39;</span><span class="o">]</span>  <span class="c1"># =&gt; nil</span>
<span class="nb">p</span> <span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="s1">&#39;reptiles&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="p">{})</span><span class="o">[</span><span class="s1">&#39;snakes&#39;</span><span class="o">]</span>  <span class="c1"># =&gt; {&#34;cobra&#34;=&gt;[&#34;king cobra&#34;, &#34;tree cobra&#34;]}</span>
<span class="nb">p</span> <span class="p">(</span><span class="n">animals</span><span class="o">[</span><span class="s1">&#39;birds&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="p">{})</span><span class="o">[</span><span class="s1">&#39;snakes&#39;</span><span class="o">]</span>  <span class="c1"># =&gt; nil</span>
</code></pre></div><p>If the value belongs to the set of falsy values like <code>false</code> we get the same result,
though <code>false</code> can be a valid index.</p>
<p>Let us see what we can do to enhance fetching values by keys from a hash.</p>
<p><code>Hash</code> types brings <code>dig</code> method:</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">p</span> <span class="n">animals</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="s1">&#39;mammals&#39;</span><span class="p">,</span> <span class="s1">&#39;snakes&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; nil</span>
<span class="nb">p</span> <span class="n">animals</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="s1">&#39;reptiles&#39;</span><span class="p">,</span> <span class="s1">&#39;snakes&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; {&#34;cobra&#34;=&gt;[&#34;king cobra&#34;, &#34;tree cobra&#34;]}</span>
<span class="nb">p</span> <span class="n">animals</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="s1">&#39;birds&#39;</span><span class="p">,</span> <span class="s1">&#39;snakes&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; nil</span>
</code></pre></div><h3 id="gems">Gems</h3>
<p>Older versions of Ruby (below 2.3) do not support safe navigation, so gems
had been popped up to fill the voidness.
Rails was also one of the firsts that provided a solution. It introduced <code>try</code>
function to check whether an indexing returns null or not.</p>
<p>Rails introduced <code>try</code> to achieve that functionality.<br>
The above code looks like as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">people</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
	<span class="nb">p</span> <span class="n">person</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:street</span><span class="p">)</span>
<span class="k">end</span>
<span class="c1"># =&gt; &#39;somewhere over the rainbow&#39;</span>
<span class="c1"># =&gt; nil</span>
</code></pre></div><p><strong>So we have got some insight how to handle embedded objects and avoid raising <code>NoMethodError</code> exceptions.</strong></p>
<p>Code can be found: <a href="https://github.com/torokmark/safe-navigation-in-languages">https://github.com/torokmark/safe-navigation-in-languages</a></p>
]]></content>
		</item>
		
		<item>
			<title>Pythonic way of count</title>
			<link>https://torokmark.github.io/posts/pythonic-way-count/</link>
			<pubDate>Tue, 09 Apr 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/pythonic-way-count/</guid>
			<description>Writing code in a clean way differs in every language. Python also has its own style. Additionally, python is famous about its one-liners.
Pythonic way is an approach of how to use the language and how to take adventage of its syntax and semantic. Python can give a very elegant way of one-liners to achieve something that most of the languages can do, but not as short and still readable way as python does it.</description>
			<content type="html"><![CDATA[<p><strong>Writing code in a clean way differs in every language.
Python also has its own style. Additionally, python is famous about its one-liners.</strong></p>
<p>Pythonic way is an approach of how to use the language and how to take
adventage of its syntax and semantic. Python can give a very elegant way of
one-liners to achieve something that most of the languages can do, but not as
short and still readable way as python does it.</p>
<p>Let&rsquo;s see the next exercise:</p>
<p><em>Count the values in a list.</em></p>
<h4 id="len">len</h4>
<p>Usually we use <code>len</code> built-in.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
<span class="c1"># =&gt; 7</span>
</code></pre></div><h4 id="sum">sum</h4>
<p>My pythonic way of count is here. For counting we can use the built-in <code>sum</code> like:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">)</span>
<span class="c1"># =&gt; 7</span>
</code></pre></div><h4 id="with-condition">With condition</h4>
<p>What if I want to count just those items that are equivalent to <code>2</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span> <span class="k">if</span> <span class="mi">2</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span>
<span class="c1"># =&gt; 2 </span>
</code></pre></div><p>What if I want to apply a predicate on the item in the current iteration?</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">even</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">arr</span> <span class="k">if</span> <span class="n">even</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="c1"># =&gt; 3</span>
</code></pre></div><p><strong>Pythonic way of count is elegant, short and still understandable.</strong></p>
]]></content>
		</item>
		
		<item>
			<title>Assertion framework in shell script</title>
			<link>https://torokmark.github.io/posts/assertion-framework-in-shell-script/</link>
			<pubDate>Sun, 31 Mar 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/assertion-framework-in-shell-script/</guid>
			<description>A little lib that helps us checking our scripts with a unit test-like way.
The Missing Tool Unit testing is part of a lot of projects&#39; toolset. Though some part of the source code requires more attention than it gets payed. Shell scripts belong to them.
How can we make sure that our scripts do what we expect they do?
How can we make sure they are valid, return the right result&amp;hellip;?</description>
			<content type="html"><![CDATA[<p><strong>A little lib that helps us checking our scripts with a unit test-like way.</strong></p>
<h3 id="the-missing-tool">The Missing Tool</h3>
<p>Unit testing is part of a lot of projects' toolset. Though some part of the
source code requires more attention than it gets payed. Shell scripts belong to
them.</p>
<p>How can we make sure that our scripts do what we expect they do?<br>
How can we make sure they are valid, return the right result&hellip;?</p>
<p>We have to write unit test-like code. To achieve this, let us see a tool that
can give a very elegant and handy way, let us see <code>assert.sh</code>.</p>
<h3 id="assert_"><code>assert_...</code></h3>
<p>Plenty of assert functions available, just naming a few of them.</p>
<ul>
<li><code>assert_eq</code> takes two strings and checks whether they are the same based on
the character strings.</li>
<li><code>assert_not_eq</code> is the opposite of <code>assert_eq</code>.</li>
<li><code>assert_true</code> takes a parameter and returns <code>0</code> confirming the parameter is
true.</li>
<li><code>assert_false</code> takes a parameter and decides whether it is false.</li>
<li><code>assert_array_eq</code> takes two arrays and compare them by items.</li>
<li><code>assert_contain</code> checks wether the second parameter is contained by the
first one</li>
</ul>
<h3 id="usage">Usage</h3>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">source</span> <span class="s2">&#34;./assert.sh&#34;</span>

<span class="nb">local</span> expected actual
<span class="nv">expected</span><span class="o">=</span><span class="s2">&#34;Hello&#34;</span>
<span class="nv">actual</span><span class="o">=</span><span class="s2">&#34;Hello&#34;</span>
assert_eq <span class="s2">&#34;</span><span class="nv">$expected</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$actual</span><span class="s2">&#34;</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$?</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  log_success <span class="s2">&#34;assert_eq returns 0 if two words are equal&#34;</span>
<span class="k">else</span>
  log_failure <span class="s2">&#34;assert_eq should return 0&#34;</span>
<span class="k">fi</span>
</code></pre></div><p>Source code is available here: <a href="https://github.com/torokmark/assert.sh">https://github.com/torokmark/assert.sh</a></p>
]]></content>
		</item>
		
		<item>
			<title>Implementing custom array in Python</title>
			<link>https://torokmark.github.io/posts/implementing-custom-array/</link>
			<pubDate>Wed, 27 Mar 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/implementing-custom-array/</guid>
			<description>Python provides basic datastructures like dictionary, list, set, and tuple. If we need another datastruct which is different from the mentioned three, we have to implement ourones.
As I started using python in my daily work, more and more questions had cropped up about the language and its refinement. One of them was to implement a custom array.
What we would like to achieve is to have a datastruct which behaves like an array.</description>
			<content type="html"><![CDATA[<p><strong>Python provides basic datastructures like <em>dictionary</em>, <em>list</em>, <em>set</em>, and <em>tuple</em>.
If we need another datastruct which is different from the mentioned three, we
have to implement ourones.</strong></p>
<p>As I started using python in my daily work, more and more questions had cropped
up about the language and its refinement. One of them was to implement a custom
array.</p>
<p>What we would like to achieve is to have a datastruct which behaves like an
array. That means, it is:</p>
<ul>
<li><strong>iterable</strong>: iteration happens over <code>for</code> loop</li>
<li><strong>subscriptable</strong>: <code>[:]</code> notation can be applied on it</li>
<li><strong>support indexing</strong>: can support index notation, <code>[n]</code>, for both reading and
writing</li>
<li><strong>length</strong>: <code>len</code> built-in  function returns the number of elements of the
array</li>
</ul>
<h3 id="the-goal">The Goal</h3>
<p>The goal is to have all the abovementioned functionalities but do not have
others that make representation available for users outside of the scope of the
class.</p>
<p>The test is found below. So we want to have all of them like <code>iter</code>, <code>len</code>,
<code>[n]</code>, or <code>[:]</code> but not want to have <code>extend</code> or other list related methods.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># test_composits.py</span>
<span class="kn">from</span> <span class="nn">expects</span> <span class="kn">import</span> <span class="o">*</span>

<span class="kn">from</span> <span class="nn">composites</span> <span class="kn">import</span> <span class="n">Composite</span>

<span class="n">arr</span> <span class="o">=</span> <span class="n">Composite</span><span class="p">()</span>

<span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">+</span><span class="mi">2</span>
<span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span>
<span class="n">arr</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">arr</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">Composite</span>

<span class="n">expect</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>

<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">iter</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span><span class="o">.</span><span class="n">not_to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">))</span>
<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">])</span><span class="o">.</span><span class="n">not_to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">))</span>
<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">next</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">))</span>

<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span><span class="o">.</span><span class="n">not_to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">))</span>
<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">.</span><span class="n">not_to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">))</span>
<span class="n">expect</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">arr</span><span class="p">[:])</span><span class="o">.</span><span class="n">not_to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">))</span>
<span class="n">expect</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">equal</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]))</span>
<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">arr</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]))</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">AttributeError</span><span class="p">))</span>
<span class="n">expect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">arr</span><span class="o">.</span><span class="n">__array</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">raise_error</span><span class="p">(</span><span class="ne">AttributeError</span><span class="p">))</span>
</code></pre></div><h3 id="the-inherited">The Inherited</h3>
<p>The most straightforward way would be to implement a custom array that is
inherited from <code>list</code>. The only drawback with this is that we get more
functions than we want to, so <code>extend</code> is also part of the class.</p>
<p>Since all methods come that <code>list</code> possesses, our test code fails.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Inherited</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
    <span class="k">pass</span>
</code></pre></div><h3 id="the-composed">The Composed</h3>
<p>The <em>composition over inheritance</em> design principle is a well-knonw approach if
we want to achieve a behaviour that we mentioned above.</p>
<p>With composition we can hide undesired functionalities of an object and provide
just those that we would like to publish to outside.</p>
<p>The tests are the same, so let us see what we have to implement to get a full
functional object with the covated behaviour.</p>
<h4 id="1-the-representation">1. The representation</h4>
<p>The representation inside is a list, but this won&rsquo;t be available from outside.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Composite</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__array</span> <span class="o">=</span> <span class="p">[]</span>
</code></pre></div><h4 id="2-length">2. Length</h4>
<p>To make <code>len(a)</code> available on our custom object, the <code>__len__</code> method should be
implemented.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__array</span><span class="p">)</span>
</code></pre></div><h4 id="3-index-and-subscription">3. Index and subscription</h4>
<p>To support indexing or subscription it is enough to implement <code>__getitem__</code>
method.</p>
<p>To make a support on <code>for</code> loop, class has to implement either <code>__getitem__</code> or
<code>__iter__</code> methods.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__array</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</code></pre></div><p>To support item assignment, <code>__setitem__</code> method has to be implemented as
well. The simplest approach would be <code>self.__array[key] = value</code>. But what if we
would like to assign a value to an index where index is not initialized
beforehand.</p>
<blockquote>
<p>Here the type of the index is not considered as anything else just integer</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="fm">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__array</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
    <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
        <span class="k">assert</span> <span class="n">key</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;key must be 0 or positive&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__array</span><span class="o">.</span><span class="n">extend</span><span class="p">(((</span><span class="n">key</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__array</span><span class="p">))</span> <span class="o">*</span> <span class="p">[</span><span class="bp">None</span><span class="p">])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__array</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div><h4 id="4-iterator">4. Iterator</h4>
<p><code>__getitem__</code> method is like a good army-knife, it could solve almost anything
we needed here.</p>
<p>Let us see what we have in the instance of the class, if we call <code>dir()</code>
built-in function, it prints an array of methods of the instance. <code>__iter__</code> is
not in there, though we can provide an iterator object.</p>
<p>As mentioned above, <code>for</code> loop iterates over the instance, but to get the
iterator object, we have to call <code>iter()</code> built-in on it. By using the iterator
object, <code>next()</code> built-in is also available to get the next value.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">arr_it</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">arr_it</span><span class="p">))</span> <span class="c1"># =&gt; 1</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span> 
        <span class="k">break</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="c1"># =&gt; 1, 2, &lt;iter....&gt; , ...</span>

<span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">arr_it</span><span class="p">))</span> <span class="c1"># =&gt; 2</span>
</code></pre></div><p>Be careful, if you want to make your class to work as an iterator.
To do this, the class has to implement <code>__iter__</code> and <code>__next__</code> methods.</p>
<p>This case, <code>for</code> loop uses <code>__next__</code> for stepping instead of <code>__getitem__</code>.
The drawback of this approach is when <code>break</code> statement jumps out of the loop
and iteration stops at one point, the next <code>for</code> loop starts the iteration from
that point instead of starting it from the beginning. An example is below:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ArrayIt</span><span class="p">:</span>
  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="p">[]):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">values</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>

  <span class="k">def</span> <span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">self</span>

  <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
    <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">raise</span> <span class="ne">StopIteration</span>

<span class="n">it</span> <span class="o">=</span> <span class="n">ArrayIt</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">it</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="c1"># =&gt; 3</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">it</span><span class="p">:</span>
  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
    <span class="k">break</span>
  <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="c1"># =&gt; 1, 2, 3, 4</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">it</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="c1"># =&gt; 6, 7</span>
</code></pre></div><p>So once again, having a class that implements <code>__getitem__</code> (indexable) and
<code>__next__</code> along with <code>__iter__</code> (iterator) next to it at one time brings this
behaviour.</p>
<h3 id="the-full-code">The Full Code</h3>
<p>The full implementation of our array class without it being an iterator is
below:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Composite</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">array</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>

    <span class="k">def</span> <span class="fm">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
            <span class="k">assert</span> <span class="n">key</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;key must be 0 or positive&#39;</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">extend</span><span class="p">(((</span><span class="n">key</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">))</span> <span class="o">*</span> <span class="p">[</span><span class="bp">None</span><span class="p">])</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">array</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div><p>Source codes can be found under here: <a href="https://github.com/torokmark/python_custom_array">https://github.com/torokmark/python_custom_array</a></p>
<p>Documentation can be found here:</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0234/#python-api-specification">https://www.python.org/dev/peps/pep-0234/#python-api-specification</a></li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types">https://docs.python.org/3/reference/datamodel.html#emulating-container-types</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html">https://docs.python.org/3/tutorial/datastructures.html</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>How to implement routing with n-ary tree</title>
			<link>https://torokmark.github.io/posts/n-ary-routing/</link>
			<pubDate>Tue, 19 Mar 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/n-ary-routing/</guid>
			<description>Routing mechanism is one of the main parts of a web service. Here I provide one approach to achieve this. This implementation is based on n-ary tree and tree search.
Many ways are available to handle routes, from regex to n-ary trees to parse registered route one by one.
Different ways N-ary Trees In this approach we can consider the root node as / and all children nodes as route parts are separated by /.</description>
			<content type="html"><![CDATA[<p><strong>Routing mechanism is one of the main parts of a web service. Here I provide one approach
to achieve this. This implementation is based on n-ary tree and tree search.</strong></p>
<p>Many ways are available to handle <em>routes</em>, from regex to n-ary trees to parse
registered route one by one.</p>
<h3 id="different-ways">Different ways</h3>
<h4 id="n-ary-trees">N-ary Trees</h4>
<p>In this approach we can consider the root node as <code>/</code> and all children nodes as
route parts are separated by <code>/</code>. Every part is on a separated level of the
tree. A node contains one route part.</p>
<p>A route part can be either a string which requires full match or a <em>path param</em>
which is a string surrounded by curly brackets (<code>{}</code>) also acceptable.</p>
<h4 id="regex">Regex</h4>
<p>All defined routes go into a stack in the order of definition.
During procession the earlier match is executed or returns the result of the executed lambda.</p>
<h4 id="parse-one-by-one">Parse one by one</h4>
<p>This approach is very similar to the above one but without regex. Let us consider a registered
route as a key in a dictionary. The value is the lambda which is intended to be executed when
call falls on the route.</p>
<p>After iterating over the keys of the dictionary either use regex to identify the
appropriate route or parse them and process by using string operations (for
those who are not into regex).</p>
<h4 id="rule-objects">Rule objects</h4>
<p>Tornado framework provides a fine-grained mechanism to define and implement routings.
The framework introduced rules and delegators parse and execute expressions.</p>
<h3 id="the-approach">The Approach</h3>
<p>In this solution the n-ary tree approach is chosen. Each node contains one part
of the route, depth of the tree equals to the longest route splitted by <code>/</code>.
All children of a node contain the next route part after the node value
separated by <code>/</code>.</p>
<h4 id="register-a-route">Register a route</h4>
<p>For route registration we can use the <code>register</code> function. It takes the route
itself, which will be parsed, splitted and considered as an identifier part.
The whole identifier of a node is the path inside the tree from the root to the
given node. Method is also part of the identifier that means the same route with
different methods are placed in two different nodes as siblings.
<code>params</code> are considered as a whitelist of queryparams. Those queryparams that
are not in this list, those are not parsed and processed, and passed to the
lambda.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">routing</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">route</span><span class="o">=</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> 
                 <span class="n">callback</span><span class="o">=</span><span class="p">(</span><span class="k">lambda</span> <span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">:</span> <span class="n">users</span><span class="o">.</span><span class="n">create_user</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">)),</span>
                 <span class="n">method</span><span class="o">=</span><span class="n">routing</span><span class="o">.</span><span class="n">Methods</span><span class="o">.</span><span class="n">POST</span><span class="p">,</span>
                 <span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;email&#39;</span><span class="p">})</span>

<span class="n">routing</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">route</span><span class="o">=</span><span class="s1">&#39;/users/{id}&#39;</span><span class="p">,</span> 
                 <span class="n">callback</span><span class="o">=</span><span class="p">(</span><span class="k">lambda</span> <span class="nb">id</span><span class="p">:</span> <span class="n">users</span><span class="o">.</span><span class="n">get_user</span><span class="p">(</span><span class="nb">id</span><span class="p">)),</span> 
                 <span class="n">method</span><span class="o">=</span><span class="n">routing</span><span class="o">.</span><span class="n">Methods</span><span class="o">.</span><span class="n">GET</span><span class="p">)</span>
</code></pre></div><h4 id="process-a-route">Process a route</h4>
<p>The <code>process</code> function takes the three agruments as shown below and returns the
result of the executed lambda. If lambda returns void than process gives back
<code>None</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">request_body</span> <span class="o">=</span> <span class="n">routing</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span> 
                               <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;queryStringParameters&#39;</span><span class="p">),</span> 
                               <span class="n">event</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;httpMethod&#39;</span><span class="p">))</span>
</code></pre></div><h4 id="routing-tree">Routing Tree</h4>
<p>Routing tree represents the registered routes. Each <em>node</em> contains the route part,
the full path from the root to itself, <em>callbacks</em> and children nodes.</p>
<p>Callbacks are stored in a dictionary with methods as keys and lambdas as values.
So this way one path could have a <code>POST</code> and a <code>GET</code> or any other methods at the
same time.</p>
<p>A node looks like as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="p">(</span><span class="nx">value</span><span class="o">=</span><span class="s2">&#34;/&#34;</span> <span class="nx">resource_path</span><span class="o">=</span><span class="s1">&#39;/&#39;</span> <span class="nx">callbacks</span><span class="o">=</span><span class="p">{}</span> <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
  <span class="p">(</span><span class="nx">value</span><span class="o">=</span><span class="s2">&#34;users&#34;</span> <span class="nx">resource_path</span><span class="o">=</span><span class="s1">&#39;/users&#39;</span> <span class="nx">callbacks</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;GET&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">callback</span><span class="o">=</span>
  <span class="nx">lambda</span><span class="o">-</span><span class="nx">expression</span><span class="p">,</span>
  <span class="nx">params</span><span class="o">=</span><span class="p">{}}}</span>  <span class="nx">children</span><span class="o">:</span> <span class="p">[])</span>
<span class="p">])</span>
</code></pre></div><p>The routing tree has two methods that can build the tree up or find the
appropriate path.</p>
<ul>
<li><strong>add</strong>: responsible to handle the registration recursively.</li>
<li><strong>find</strong>: responsible for evaluation of the call.</li>
</ul>
<p>Both methods traverse the tree recursively, finding matching parts.
If parts found, and no other path left, it returns the appropriate value, or it goes
towards to one of the children if necessary.</p>
<h4 id="add-route-with-pathparam">Add route with pathparam</h4>
<p>Pathparam is also part of the representation so it goes as a node value, like
<code>{id}</code>.
This implementation requires that no multiple pathparam names are allowed.
That means no <code>{id}</code> and <code>{user_id}</code> are allowed at the same time.</p>
<h4 id="process-a-call">Process a call</h4>
<p>Routing trees <code>find</code> method is responsible for getting back the lambda call
based on the route path and the method. If one of them are differ from what the
tree contains, <code>find</code> raise an error accordingly.</p>
<p>At first, <code>find</code> checks wether the path on a given node could match. If so, it
traverse through children searching for exact matching. If no matching found on
the level, it considers the path as a pathparam and goes towards the children of
the pathparam node.</p>
<h4 id="validation">Validation</h4>
<p><code>register</code> as well as <code>process</code> have their own validators against injections and malicious
characters that can mess up with the database.</p>
<p>Here I used very simple validation by using regex, but it is alterable according
to the needs.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">PATH_PARAM_PATTERN</span> <span class="o">=</span> <span class="s1">&#39;^{([a-zA-Z0-9]+)}$&#39;</span>
<span class="n">PATH_PART_PATTERN</span> <span class="o">=</span> <span class="s1">&#39;^[a-zA-Z0-9\-]+$&#39;</span>

<span class="n">QUERY_KEY_PATTERN</span> <span class="o">=</span> <span class="s1">&#39;^[a-zA-Z0-9]+$&#39;</span>
<span class="n">QUERY_VALUE_PATTERN</span> <span class="o">=</span> <span class="s1">&#39;(^[a-zA-Z0-9\-@\. ]+$)&#39;</span>
</code></pre></div><p>The implementation gives a chance to fine-tune the validation by introducing
param specific patterns. These could be placed in either <code>validate_route_register</code> or
<code>validate_route_process</code> or in both.</p>
<h4 id="what-it-does-not-contain">What it does not contain</h4>
<p>It is an experimental project so it lacks some other features.
The implementation of these features does not require much alteration on the
code, though I leave it for others. The list below.</p>
<ul>
<li>Process request body and send data as JSON</li>
<li>Optional params for <code>PATCH</code></li>
<li>Validate params to avoid updating id</li>
<li>Context param of handler func</li>
<li>Builder for response (which can be found in my other post)</li>
</ul>
<p><strong>In this post we saw one approach of implementing routing in python, how to
declare route with method, params and lambda, and took a look on how to process it.</strong></p>
<p>For further reading and for the implementation you can visit <a href="https://github.com/torokmark/routing_python">https://github.com/torokmark/routing_python</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>The Multibuilder Pattern</title>
			<link>https://torokmark.github.io/posts/multibuilder-pattern/</link>
			<pubDate>Tue, 08 Jan 2019 12:00:00 +0100</pubDate>
			
			<guid>https://torokmark.github.io/posts/multibuilder-pattern/</guid>
			<description>In this post I would like to present a couple of solutions for builder pattern in python, and finally I show how I implemented a builder that I call multibuilder pattern.
Builder pattern comes in handy when we need to set a lot of fields of an object and we do not want to use many methods with multiple parameters.
All implementations are found in this repo: https://github.com/torokmark/builders_in_python
The Simple One Task: Let us implement a Person with the following fields like name, age, phone.</description>
			<content type="html"><![CDATA[<p><strong>In this post I would like to present a couple of solutions for builder pattern in python,
and finally I show how I implemented a builder that I call multibuilder pattern.</strong></p>
<p>Builder pattern comes in handy when we need to set a lot of fields of an object and we do not want to use many methods with multiple parameters.</p>
<p>All implementations are found in this repo: <a href="https://github.com/torokmark/builders_in_python">https://github.com/torokmark/builders_in_python</a></p>
<h2 id="the-simple-one">The Simple One</h2>
<p><strong>Task</strong>: Let us implement a <code>Person</code> with the following fields like <code>name</code>, <code>age</code>, <code>phone</code>.<br>
<strong>Approach</strong>: Make a <code>PersonBuilder</code> with methods according to the fields in <code>Person</code>, plus a <code>build</code> which returns an object of <code>Person</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">phone</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span> <span class="o">=</span> <span class="n">phone</span>

    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>

    <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_age</span>
    
    <span class="k">def</span> <span class="nf">phone</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s1">&#39;[name={}; age={}; phone={}]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_age</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">PersonBuilder</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="s1">&#39;John Doe&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_age</span> <span class="o">=</span> <span class="mi">99</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span> <span class="o">=</span> <span class="s1">&#39;000&#39;</span>

    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">phone</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">phone</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span> <span class="o">=</span> <span class="n">phone</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Person</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_age</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">PersonBuilder</span><span class="p">()</span>
        <span class="o">.</span><span class="n">name</span><span class="p">(</span><span class="s1">&#39;jancsi&#39;</span><span class="p">)</span>
        <span class="o">.</span><span class="n">age</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
        <span class="o">.</span><span class="n">phone</span><span class="p">(</span><span class="s1">&#39;11223344&#39;</span><span class="p">)</span>
        <span class="o">.</span><span class="n">age</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>
        <span class="o">.</span><span class="n">build</span><span class="p">())</span>            
    <span class="c1"># =&gt; [name=jancsi; age=18; phone=11223344]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">PersonBuilder</span><span class="p">()</span>
        <span class="o">.</span><span class="n">age</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
        <span class="o">.</span><span class="n">phone</span><span class="p">(</span><span class="s1">&#39;11223344&#39;</span><span class="p">)</span>
        <span class="o">.</span><span class="n">age</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>
        <span class="o">.</span><span class="n">build</span><span class="p">())</span>            
    <span class="c1"># =&gt; [name=John Doe; age=18; phone=11223344]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">PersonBuilder</span><span class="p">()</span>
        <span class="o">.</span><span class="n">build</span><span class="p">())</span>            
    <span class="c1"># =&gt; [name=John Doe; age=99; phone=000]</span>
</code></pre></div><h2 id="the-one-with-named-parameters">The One with Named Parameters</h2>
<p>Though builder is very flexible, it is inevitable to have some default values for those fields that are not set during the building.</p>
<p><strong>Task</strong>: How to do this without builder?<br>
<strong>Approach</strong>: Let us use default values in constructor parameter list.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;John Doe&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">99</span><span class="p">,</span> <span class="n">phone</span><span class="o">=</span><span class="s1">&#39;000&#39;</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span> <span class="o">=</span> <span class="n">phone</span>

    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>

    <span class="k">def</span> <span class="nf">age</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_age</span>
    
    <span class="k">def</span> <span class="nf">phone</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s1">&#39;[name={}; age={}; phone={}]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
          <span class="bp">self</span><span class="o">.</span><span class="n">_name</span><span class="p">,</span> 
          <span class="bp">self</span><span class="o">.</span><span class="n">_age</span><span class="p">,</span> 
          <span class="bp">self</span><span class="o">.</span><span class="n">_phone</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">Person</span><span class="p">())</span>                        
    <span class="c1"># =&gt; [name=John Doe; age=99; phone=000]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="s1">&#39;123456&#39;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">45</span><span class="p">))</span>  
    <span class="c1"># =&gt; [name=John Doe; age=45; phone=123456]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="s1">&#39;jancsi&#39;</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="s1">&#39;312333&#39;</span><span class="p">))</span>  
    <span class="c1"># =&gt; [name=jancsi; age=54; phone=312333]</span>
</code></pre></div><h2 id="the-classic">The Classic</h2>
<p><strong>Task</strong>: Let us implement a classic car builder.<br>
<strong>Solution</strong>: Take the example from <em>Gang of Four</em>!</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Car</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">wheel</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">seat</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">wheel</span> <span class="o">=</span> <span class="n">wheel</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">seat</span> <span class="o">=</span> <span class="n">seat</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">color</span>

    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s1">&#39;[wheels: {}, seats: {}, color: {}]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
          <span class="bp">self</span><span class="o">.</span><span class="n">wheel</span><span class="p">,</span> 
          <span class="bp">self</span><span class="o">.</span><span class="n">seat</span><span class="p">,</span> 
          <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Builder</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">set_wheels</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">wheel</span><span class="p">):</span> <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">set_seats</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">seat</span><span class="p">):</span> <span class="k">pass</span>
    <span class="k">def</span> <span class="nf">set_color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span> <span class="k">pass</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">CarBuilder</span><span class="p">(</span><span class="n">Builder</span><span class="p">):</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">car</span> <span class="o">=</span> <span class="n">Car</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">set_wheels</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">wheel</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">car</span><span class="o">.</span><span class="n">wheel</span> <span class="o">=</span> <span class="n">wheel</span>

    <span class="k">def</span> <span class="nf">set_seats</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">seat</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">car</span><span class="o">.</span><span class="n">seat</span> <span class="o">=</span> <span class="n">seat</span>

    <span class="k">def</span> <span class="nf">set_color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">car</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">color</span>

    <span class="k">def</span> <span class="nf">get_result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">car</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">CarBuilderDirector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">builder</span> <span class="o">=</span> <span class="n">CarBuilder</span><span class="p">()</span>
        <span class="n">builder</span><span class="o">.</span><span class="n">set_wheels</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
        <span class="n">builder</span><span class="o">.</span><span class="n">set_seats</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
        <span class="n">builder</span><span class="o">.</span><span class="n">set_color</span><span class="p">(</span><span class="s2">&#34;Red&#34;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="n">get_result</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">car</span> <span class="o">=</span> <span class="n">CarBuilderDirector</span><span class="p">()</span><span class="o">.</span><span class="n">build</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>      
    <span class="c1"># =&gt; [wheels: 8, seats: 4, color: Red]</span>
</code></pre></div><h2 id="the-builder-with-builders">The Builder with Builders</h2>
<p><strong>Task</strong>: Implement a <em>Response object</em> builder. It has a status code, a header and a body part. Create a builder that can build multiple part of an object.<br>
<strong>Approach</strong>: Let us implement so called subbuilders and pass the created objects to an outer builder, which combines them together.</p>
<blockquote>
<p>Using just <code>HeaderBuilder#add(key, value)</code> instead of using header specific setters.</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Builder</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="k">pass</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">HeaderBuilder</span><span class="p">(</span><span class="n">Builder</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_header</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_header</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_header</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">BodyBuilder</span><span class="p">(</span><span class="n">Builder</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_body</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_body</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_body</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ResponseBuilder</span><span class="p">(</span><span class="n">Builder</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_header</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_body</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_status</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">header</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">header</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_header</span> <span class="o">=</span> <span class="n">header</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_status</span> <span class="o">=</span> <span class="n">status</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;statusCode&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_status</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;header&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_header</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_body</span>
        <span class="k">return</span> <span class="n">ret</span>

</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">ResponseBuilder</span><span class="p">()</span>
            <span class="o">.</span><span class="n">header</span><span class="p">(</span>
                <span class="n">HeaderBuilder</span><span class="p">()</span>
                    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Accept&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
                    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
                    <span class="o">.</span><span class="n">build</span><span class="p">()</span>
            <span class="p">)</span>
            <span class="o">.</span><span class="n">body</span><span class="p">(</span>
                <span class="n">BodyBuilder</span><span class="p">()</span>
                    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;some message comes here&#39;</span><span class="p">)</span>
                    <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;another message here...&#39;</span><span class="p">)</span>
                    <span class="o">.</span><span class="n">build</span><span class="p">()</span>
            <span class="p">)</span>
            <span class="o">.</span><span class="n">status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
            <span class="o">.</span><span class="n">build</span><span class="p">()</span>
    <span class="p">)</span>                   
    <span class="c1"># =&gt; {&#39;statusCode&#39;: 200, &#39;header&#39;: {&#39;Accept&#39;: &#39;*&#39;, &#39;Age&#39;: 12}, &#39;body&#39;: [&#39;some message comes here&#39;, &#39;another message here...&#39;]}</span>
</code></pre></div><h2 id="the-multibuilder">The Multibuilder</h2>
<p><strong>Task</strong>: Create a builder that can build multiple part of an object at one time whitout using so called subbuilders.<br>
<strong>Approach</strong>: Let us chain everything up and memorize the already created objects.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">HeaderBuilder</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_header</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_header</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_body</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">code</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;header&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_header</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_body</span><span class="o">.</span><span class="vm">__dict__</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;_body&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ret</span>

    <span class="k">def</span> <span class="nf">set_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_body</span> <span class="o">=</span> <span class="n">body</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">BodyBuilder</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_body</span> <span class="o">=</span> <span class="p">[]</span> 

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_body</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">header</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_header</span>

    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">status</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">code</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;header&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_header</span><span class="o">.</span><span class="vm">__dict__</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;_header&#39;</span><span class="p">)</span>
        <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_body</span>
        <span class="k">return</span> <span class="n">ret</span>

    <span class="k">def</span> <span class="nf">set_header</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">header</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_header</span> <span class="o">=</span> <span class="n">header</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ResponseBuilder</span><span class="p">:</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__header</span> <span class="o">=</span> <span class="n">HeaderBuilder</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span> <span class="o">=</span> <span class="n">BodyBuilder</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="o">.</span><span class="n">set_header</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__header</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">__header</span><span class="o">.</span><span class="n">set_body</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__body</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">header</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__header</span>

    <span class="k">def</span> <span class="nf">body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__body</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">ResponseBuilder</span><span class="p">()</span>
            <span class="o">.</span><span class="n">header</span><span class="p">()</span>
                <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
                <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Accept&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
            <span class="o">.</span><span class="n">body</span><span class="p">()</span>
                <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">str</span><span class="p">))</span>
            <span class="o">.</span><span class="n">status</span><span class="p">(</span><span class="mi">204</span><span class="p">))</span>

    <span class="k">print</span><span class="p">(</span><span class="n">ResponseBuilder</span><span class="p">()</span>
            <span class="o">.</span><span class="n">header</span><span class="p">()</span>
                <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Age&#39;</span><span class="p">,</span> <span class="s1">&#39;12&#39;</span><span class="p">)</span>
                <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Accept&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
            <span class="o">.</span><span class="n">body</span><span class="p">()</span>
                <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;message comes here!&#39;</span><span class="p">)</span>
            <span class="o">.</span><span class="n">header</span><span class="p">()</span>
                <span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>
            <span class="o">.</span><span class="n">build</span><span class="p">())</span> <span class="c1"># status is default to 200</span>
</code></pre></div><p>All these approaches are found in <a href="https://github.com/torokmark/builders_in_python">https://github.com/torokmark/builders_in_python</a></p>
]]></content>
		</item>
		
		<item>
			<title>Best practices to write an Entity in Spring/Hibernate</title>
			<link>https://torokmark.github.io/posts/entity-best-practices/</link>
			<pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
			
			<guid>https://torokmark.github.io/posts/entity-best-practices/</guid>
			<description>Every entity has to have a public default contstructor fetchType = FetchType.LAZY on @OneToOne, @OneToMany and @ManyToOne and other associations (EAGER is the default except @OneToMany) If an association is not mandatory:  optional = false on association annotations @Column and @JoinColumn should contain nullable = false   Entity should implement Persistable&amp;lt;IDTYPE&amp;gt; interface  Create own interface with default implementation:    public interface Identifiable extends Persistable&amp;lt;Long&amp;gt; { default isNew() { return getId() == null; } }  All ids should be boxed like Long, Integer, String, etc.</description>
			<content type="html"><![CDATA[<ul>
<li>Every entity has to have a <em>public default contstructor</em></li>
<li><code>fetchType = FetchType.LAZY</code> on <code>@OneToOne</code>, <code>@OneToMany</code> and <code>@ManyToOne</code> and other associations (EAGER is the default except <code>@OneToMany</code>)</li>
<li>If an association is not mandatory:
<ul>
<li><code>optional = false</code> on association annotations</li>
<li><code>@Column</code> and <code>@JoinColumn</code> should contain <code>nullable = false</code></li>
</ul>
</li>
<li>Entity should implement <code>Persistable&lt;IDTYPE&gt;</code> interface
<ul>
<li>Create own interface with default implementation:</li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Identifiable</span> <span class="kd">extends</span> <span class="n">Persistable</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span> 
     <span class="k">default</span> <span class="n">isNew</span><span class="o">()</span> <span class="o">{</span> 
         <span class="k">return</span> <span class="n">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;</span> 
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div><ul>
<li>All ids should be boxed like <code>Long</code>, <code>Integer</code>, <code>String</code>, etc. (Implementing <code>Persistable&lt;IDTYPE&gt;</code> will ensure this.)</li>
<li>Do not use <em>lombok</em> for entities (hibernate), generated code interfere with each other</li>
<li>Do not reimplement <code>equals</code> and <code>hashCode</code> for entities</li>
<li>Do not use primitives if they can be null in the DB</li>
</ul>
<p>In the service layer:</p>
<ul>
<li>Use <code>@Transactional(readOnly = true)</code> if the method can write db or <code>@Transactional(readOnly = false)</code> if not (false is the default in spring)</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
