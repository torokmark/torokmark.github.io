<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on T[h]ink]er[ing</title>
    <link>/post/</link>
    <description>Recent content in Posts on T[h]ink]er[ing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Feb 2020 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Do you know Java: Instance from static launcher</title>
      <link>/post/do-you-know-java-static-launcher/</link>
      <pubDate>Tue, 18 Feb 2020 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-static-launcher/</guid>
      <description>Instantiate the current class from its entry point by using static method. Interesting, isn&amp;rsquo;t it?
I came across with JavaFX recently, and I saw an example about how to use it. This made me think, and brought the following question in my mind. How can we make an instance of the class that is the starting point of our application and how can we call its instance methods.
Let us see the code that we have if we start building a javafx application.</description>
    </item>
    
    <item>
      <title>Do you know Java: PECS</title>
      <link>/post/do-you-know-java-pecs/</link>
      <pubDate>Sat, 08 Feb 2020 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-pecs/</guid>
      <description>Do you remember the rule of PECS? If not, read the post quickly!
PECS stands for Produce-Extend, Consume-Super. What does that mean? Let us see an example with types from the standard.
Object void add(List&amp;lt;Object&amp;gt; list) { list.add(&amp;#34;string&amp;#34;); list.add(1); } Passing the followings are:
add(new ArrayList&amp;lt;Object&amp;gt;()); // not type safe add(new ArrayList&amp;lt;String&amp;gt;()); // compile time error The first is not type safe, the second one does not compile, since ArrayList&amp;lt;String&amp;gt; is not the subtype of List&amp;lt;Object&amp;gt;.</description>
    </item>
    
    <item>
      <title>Do you know Java: JShell</title>
      <link>/post/do-you-know-java-jshell/</link>
      <pubDate>Sun, 05 Jan 2020 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-jshell/</guid>
      <description>JShell interpreter can process Java statements without requiring them to be placed in class and method body.
JShell interpreter and CLI were introduced in Java 9. That come handy when we would like to execute a statement, or call a subroutine to get their results.
Shell To enter the shell, we should type jshell in the command line and hit enter.
| Welcome to JShell -- Version 13 | For an introduction type: /help intro jshell&amp;gt;  | Welcome to JShell -- Version 13 | For an introduction type: /help intro jshell&amp;gt; int i = 1 + 2; i ==&amp;gt; 3 jshell&amp;gt; System.</description>
    </item>
    
    <item>
      <title>Do you know Java: Arrays as Generic Containers</title>
      <link>/post/do-you-know-java-arrays-as-generic-containers/</link>
      <pubDate>Sat, 28 Dec 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-arrays-as-generic-containers/</guid>
      <description>We can assign different type of elements to an array even the operation is accepted in compile-time, that raises error in run-time.
Sometimes Java is tricky, even it has static type system, we can assign different type of elements to an array, which is accepted in compile time, even array contains different type than the types of the element.
Covariance Let S &amp;lt;: T mean that S is subtype of T and covariant is S &amp;lt;: T =&amp;gt; S&#39; &amp;lt;: T&#39;.</description>
    </item>
    
    <item>
      <title>Do you know Java: Parameter validation</title>
      <link>/post/do-you-know-java-parameter-validation/</link>
      <pubDate>Sat, 21 Dec 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-parameter-validation/</guid>
      <description>Checking method parameters is crutial to avoid inconvenient situations with null pointers or undesired values. Assertion and exception handling are two ways to give feedback to users about parameters.
What if we are intended to validate the parameters of a function? What if we liked to set up preconditions? How can we avoid working with null objects?
In this post we take a look at two approaches. At first, we see how we can check parameters with assertion and what its pros and cons are.</description>
    </item>
    
    <item>
      <title>Interview: Implement a HashMap-like data structure in Java</title>
      <link>/post/interview-map/</link>
      <pubDate>Sun, 15 Dec 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/interview-map/</guid>
      <description>HashMap is one of the most used Map type in Java. A good experiment to implement our own one.
Not so long ago, I took a sit in an interview, and the interviewer asked me to implement a HashMap-like container which contains Integer types keys and Integer values. The trick was that I could not use any containers from the Collection API framework.
Steps we have to consider: * Basic API for our map!</description>
    </item>
    
    <item>
      <title>Do you know Java: One more more more time</title>
      <link>/post/do-you-know-java-one-more-more-more-time/</link>
      <pubDate>Mon, 18 Nov 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-one-more-more-more-time/</guid>
      <description>Operators have arity. Sometimes we can make patterns out of them. Which is funny.
Every operator has an arity in Java. They can be either unary, binary, and ternary operators. Arity decides how many operands are accepted in the operation. This brings us the next riddle.
The Riddle What is the output of the next operation?
class Main { public static void main(String[] args) { int n = 0; int i = 1; n = i + + + + + + i; System.</description>
    </item>
    
    <item>
      <title>Do you know Java: Underscore as identifier</title>
      <link>/post/do-you-know-java-underscore-as-identifier/</link>
      <pubDate>Mon, 28 Oct 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-underscore-as-identifier/</guid>
      <description>We could use underscore as a variable name until Java 7, but it cannot be used as an identifier from Java 9 and upwards.
Java has strict rules about how to name a variable, which characters are accepted in it or which one can be the first one. Underscore is a legal character among alphabetic characters and numbers. What if I did not use any other chars just underscore? Is that still valid variable name?</description>
    </item>
    
    <item>
      <title>Ruby-like struct in Python #2</title>
      <link>/post/python-struct-2/</link>
      <pubDate>Sat, 26 Oct 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/python-struct-2/</guid>
      <description>Ruby provides a very handy type called OpenStruct to create objects. It brings the opportunity to add fields to objects during the runtime. Here is its Python counterpart.
In the previous post I showed Struct from esu which helps creating new types with fields and methods. That has a sibling, called OpenStruct which helps creating objects on the fly.
Usage Ruby&amp;rsquo;s OpenStruct (doc:2.6.5) inspired it, and it looks as follows.</description>
    </item>
    
    <item>
      <title>Ruby-like struct in Python</title>
      <link>/post/python-struct/</link>
      <pubDate>Sat, 19 Oct 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/python-struct/</guid>
      <description>Ruby provides a very flexible way to create new types with certain fields with Struct. Though Python does not have this functionality naturally, with esu package we can do the same.
Ruby types have rich API which is brought by the design, and the language features as well. Even though Python is very dynamic and flexible as well, some of the features are lacking in the languages.
In this post I would like to show you a Python package, name is esu, which brings a struct that can provide almost the same functionality.</description>
    </item>
    
    <item>
      <title>Do you know Java: Varargs as Entry Point Parameter</title>
      <link>/post/do-you-know-java-varargs-in-entry-point/</link>
      <pubDate>Tue, 15 Oct 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-varargs-in-entry-point/</guid>
      <description>Java 5 was one of those versions that brought much more features and syntactic sugars than any other of them. Varargs is one of those. This provides a very comfortable way to pass different number of arguments to a method. Can we use it anywhere?
Varargs is just a syntactic sugar, it can be used in a more flexible way than its predecessor, the typed array. It has the same characteristics which means it supports indexing, it has an attribute called length, it is iterable.</description>
    </item>
    
    <item>
      <title>Do you know Java: Underscores in Numeric Literals</title>
      <link>/post/do-you-know-java-underscores-in-numeric-literals/</link>
      <pubDate>Thu, 05 Sep 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-underscores-in-numeric-literals/</guid>
      <description>Underscore can be used in numeric literals to group digits in a numeric value. This way that can enhance code readability, decrease mistyping and helps visually keeping numeric values in range.
Code readability is one of the most important viewpoints of software development. The more readable the code is, the faster that can be understood by developers.
Java 7 introduced underscore as a comfortable way to separate digits of a numeric value into groups.</description>
    </item>
    
    <item>
      <title>Do you know Java: Single Source File Code</title>
      <link>/post/do-you-know-java-single-source-file-code/</link>
      <pubDate>Wed, 28 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-single-source-file-code/</guid>
      <description>Java 11 introduced a new way of executing applications. That gives us the opportunity to do it without excplicitely compiling it. What&amp;rsquo;s more, Java code can be run as a script.
In Java, compilation and execution of an app are two different steps. The java command gives us the feeling that we work with an interpreter.
The Pre-Java-11 era Compilation of the source code and execution of the app are separated commands before Java 11, as we see here:</description>
    </item>
    
    <item>
      <title>Ruby&#39;s or operator precedence</title>
      <link>/post/rubys-or-operator-precedence/</link>
      <pubDate>Fri, 23 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/rubys-or-operator-precedence/</guid>
      <description>Operators have precedence and sometimes they can give us hard time to figure out why our code works as it does.
Ruby has three or operators, |, ||, and the readable or. All of them have different precedences. That is, the precedence, that makes some trouble if we do not care about which one we use.
The evaluation of logical operators are left-associative, that means the far left operator is evaluated at first, than its result will be the left operand of the next operator and so on.</description>
    </item>
    
    <item>
      <title>Container types in shell script</title>
      <link>/post/container-types-in-shell-script/</link>
      <pubDate>Thu, 15 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/container-types-in-shell-script/</guid>
      <description>Shell script does not support container types like map, set, or queue, though with a third-party lib, presented here, we can use them in our scripts.
From time to time we need map, queue or any other kind of collections during our work. Shell script is definitely not the right choice to write applications but it may happen that we need some of the previously mentioned types to help our work.</description>
    </item>
    
    <item>
      <title>Do you know Java: Entry Point in Interface or Enum</title>
      <link>/post/do-you-know-java-entry-point-in-interface/</link>
      <pubDate>Fri, 09 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-entry-point-in-interface/</guid>
      <description>All Java applications start with a class and an entry point in it. We can change the class type to others.
All Java applications start at one common point. That is a class which has at least one static method, called main as an entry point of the app. This method is called by JRE after the class is loaded when we execute java command with the appropriate name of the class.</description>
    </item>
    
    <item>
      <title>Safe navigation in languages</title>
      <link>/post/safe-navigation-in-languages/</link>
      <pubDate>Mon, 05 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/safe-navigation-in-languages/</guid>
      <description>As we saw in the previous post, Ruby development team introduced a safe navigation operator to get rid of painful chaining of objects, which could raise NPE in case of null object in the middle. But Ruby is not the only language that came up with this idea. Most of the languages have introduced this operator, usually called null propagation, or some other approaches to achieve the same goal.</description>
    </item>
    
    <item>
      <title>Benchmarking Ruby Control Flows and Datastructures</title>
      <link>/post/ruby-benchmark-control-flows/</link>
      <pubDate>Sat, 03 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/ruby-benchmark-control-flows/</guid>
      <description>Flexibility of Ruby brings many ways to achieve the same results, whether it is a loop, selection of elements from datastructures, or assignment of values.
Performance is one of the major metrics of an application. Ruby provides a module, natively brought by the language, called Benchmark, which helps us to observe the code and reflects the potential bottlenecks.
Sometimes that is very suprising which statement executes faster and which of them provides less performance.</description>
    </item>
    
    <item>
      <title>Do you know Java: Double Brace Initialization</title>
      <link>/post/do-you-know-java-double-brace-initialization/</link>
      <pubDate>Sun, 28 Jul 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-double-brace-initialization/</guid>
      <description>Double brace initialization is a very comfortable way to add values to a collection or pairs to a map instance instead of having multiple statements next to each other.
One of the most popular languages, though Java is full of interesting parts that look wierd or unusual at first glance. In the sequence I call Do you know Java, I would like to present these less known or unexplained parts of the languages.</description>
    </item>
    
    <item>
      <title>Safe navigation in Ruby</title>
      <link>/post/safe-navigation-in-ruby/</link>
      <pubDate>Mon, 17 Jun 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/safe-navigation-in-ruby/</guid>
      <description>Navigation through embedded objects can suprise us with an error if one of the fields, which are objects as well, is null. We are in the same situation if we have a hash object and want to get a value by key if key does not exist. The burning situation crops up if we chain up methods next to each other.
In this post I write some approaches, how to keep our code still clean, readable and safe if we liked to chain up calls next one another on an object or on a key-value pair container.</description>
    </item>
    
    <item>
      <title>Pythonic way of count</title>
      <link>/post/pythonic-way-count/</link>
      <pubDate>Tue, 09 Apr 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/pythonic-way-count/</guid>
      <description>Writing code in a clean way differs in every language. Python also has its own style. Additionally, python is famous about its one-liners.
Pythonic way is an approach of how to use the language and how to take adventage of its syntax and semantic. Python can give a very elegant way of one-liners to achieve something that most of the languages can do, but not as short and still readable way as python does it.</description>
    </item>
    
    <item>
      <title>Assertion framework in shell script</title>
      <link>/post/assertion-framework-in-shell-script/</link>
      <pubDate>Sun, 31 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/assertion-framework-in-shell-script/</guid>
      <description>A little lib that helps us checking our scripts with a unit test-like way.
The Missing Tool Unit testing is part of a lot of projects&amp;rsquo; toolset. Though some part of the source code requires more attention than it gets payed. Shell scripts belong to them.
How can we make sure that our scripts do what we expect they do?
How can we make sure they are valid, return the right result&amp;hellip;?</description>
    </item>
    
    <item>
      <title>Implementing custom array in Python</title>
      <link>/post/implementing-custom-array/</link>
      <pubDate>Wed, 27 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/implementing-custom-array/</guid>
      <description>Python provides basic datastructures like dictionary, list, set, and tuple. If we need another datastruct which is different from the mentioned three, we have to implement ourones.
As I started using python in my daily work, more and more questions had cropped up about the language and its refinement. One of them was to implement a custom array.
What we would like to achieve is to have a datastruct which behaves like an array.</description>
    </item>
    
    <item>
      <title>How to implement routing with n-ary tree</title>
      <link>/post/n-ary-routing/</link>
      <pubDate>Tue, 19 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/n-ary-routing/</guid>
      <description>Routing mechanism is one of the main parts of a web service. Here I provide one approach to achieve this. This implementation is based on n-ary tree and tree search.
Many ways are available to handle routes, from regex to n-ary trees to parse registered route one by one.
Different ways N-ary Trees In this approach we can consider the root node as / and all children nodes as route parts are separated by /.</description>
    </item>
    
    <item>
      <title>The Multibuilder Pattern</title>
      <link>/post/multibuilder-pattern/</link>
      <pubDate>Tue, 08 Jan 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/multibuilder-pattern/</guid>
      <description>In this post I would like to present a couple of solutions for builder pattern in python, and finally I show how I implemented a builder that I call multibuilder pattern.
Builder pattern comes in handy when we need to set a lot of fields of an object and we do not want to use many methods with multiple parameters.
All implementations are found in this repo: https://github.com/torokmark/builders_in_python
The Simple One Task: Let us implement a Person with the following fields like name, age, phone.</description>
    </item>
    
    <item>
      <title>Best practices to write an Entity in Spring/Hibernate</title>
      <link>/post/entity-best-practices/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/entity-best-practices/</guid>
      <description>Every entity has to have a public default contstructor fetchType = FetchType.LAZY on @OneToOne, @OneToMany and @ManyToOne and other associations (EAGER is the default except @OneToMany) If an association is not mandatory:  optional = false on association annotations @Column and @JoinColumn should contain nullable = false  Entity should implement Persistable&amp;lt;IDTYPE&amp;gt; interface  Create own interface with default implementation:   public interface Identifiable extends Persistable&amp;lt;Long&amp;gt; { default isNew() { return getId() == null; } }  All ids should be boxed like Long, Integer, String, etc.</description>
    </item>
    
  </channel>
</rss>