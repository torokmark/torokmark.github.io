<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on T[h]inking</title>
    <link>/post/</link>
    <description>Recent content in Posts on T[h]inking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Aug 2019 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Container types in shell script</title>
      <link>/post/container-types-in-shell-script/</link>
      <pubDate>Thu, 15 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/container-types-in-shell-script/</guid>
      <description>Shell script does not support container types like map, set, or queue, though with a third-party lib, presented here, we can use them in our scripts.
From time to time we need map, queue or any other kind of collections during our work. Shell script is definitely not the right choice to write applications but it may happen that we need some of the previously mentioned types to help our work.</description>
    </item>
    
    <item>
      <title>Do you know Java: Entry Point in Interface or Enum</title>
      <link>/post/do-you-know-java-entry-point-in-interface/</link>
      <pubDate>Fri, 09 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-entry-point-in-interface/</guid>
      <description>All Java applications start with a class and an entry point in it. We can change the class type to others.
All Java applications start at one common point. That is a class which has at least one static method, called main as an entry point of the app. This method is called by JRE after the class is loaded when we execute java command with the appropriate name of the class.</description>
    </item>
    
    <item>
      <title>Safe navigation in languages</title>
      <link>/post/safe-navigation-in-languages/</link>
      <pubDate>Mon, 05 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/safe-navigation-in-languages/</guid>
      <description>As we saw in the previous post, Ruby development team introduced a safe navigation operator to get rid of painful chaining of objects, which could raise NPE in case of null object in the middle. But Ruby is not the only language that came up with this idea. Most of the languages have introduced this operator, usually called null propagation, or some other approaches to achieve the same goal.</description>
    </item>
    
    <item>
      <title>Benchmarking Ruby Control Flows and Datastructures</title>
      <link>/post/ruby-benchmark-control-flows/</link>
      <pubDate>Sat, 03 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/ruby-benchmark-control-flows/</guid>
      <description>Flexibility of Ruby brings many ways to achieve the same results, whether it is a loop, selection of elements from datastructures, or assignment of values.
Performance is one of the major metrics of an application. Ruby provides a module, natively brought by the language, called Benchmark, which helps us to observe the code and reflects the potential bottlenecks.
Sometimes that is very suprising which statement executes faster and which of them provides less performance.</description>
    </item>
    
    <item>
      <title>Do you know Java: Double Brace Initialization</title>
      <link>/post/do-you-know-java-double-brace-initialization/</link>
      <pubDate>Sun, 28 Jul 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-double-brace-initialization/</guid>
      <description>Double brace initialization is a very comfortable way to add values to a collection or pairs to a map instance instead of having multiple statements next to each other.
One of the most popular languages, though Java is full of interesting parts that look wierd or unusual at first glance. In the sequence I call Do you know Java, I would like to present these less known or unexplained parts of the languages.</description>
    </item>
    
    <item>
      <title>Safe navigation in Ruby</title>
      <link>/post/safe-navigation-in-ruby/</link>
      <pubDate>Mon, 17 Jun 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/safe-navigation-in-ruby/</guid>
      <description>Navigation through embedded objects can suprise us with an error if one of the fields, which are objects as well, is null. We are in the same situation if we have a hash object and want to get a value by key if key does not exist. The burning situation crops up if we chain up methods next to each other.
In this post I write some approaches, how to keep our code still clean, readable and safe if we liked to chain up calls next one another on an object or on a key-value pair container.</description>
    </item>
    
    <item>
      <title>Pythonic way of count</title>
      <link>/post/pythonic-way-count/</link>
      <pubDate>Tue, 09 Apr 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/pythonic-way-count/</guid>
      <description>Writing code in a clean way differs in every language. Python also has its own style. Additionally, python is famous about its one-liners.
Pythonic way is an approach of how to use the language and how to take adventage of its syntax and semantic. Python can give a very elegant way of one-liners to achieve something that most of the languages can do, but not as short and still readable way as python does it.</description>
    </item>
    
    <item>
      <title>Assertion framework in shell script</title>
      <link>/post/assertion-framework-in-shell-script/</link>
      <pubDate>Sun, 31 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/assertion-framework-in-shell-script/</guid>
      <description>A little lib that helps us checking our scripts with a unit test-like way.
The Missing Tool Unit testing is part of a lot of projects&amp;rsquo; toolset. Though some part of the source code requires more attention than it gets payed. Shell scripts belong to them.
How can we make sure that our scripts do what we expect they do?
How can we make sure they are valid, return the right result&amp;hellip;?</description>
    </item>
    
    <item>
      <title>Implementing custom array in Python</title>
      <link>/post/implementing-custom-array/</link>
      <pubDate>Wed, 27 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/implementing-custom-array/</guid>
      <description>Python provides basic datastructures like dictionary, list, set, and tuple. If we need another datastruct which is different from the mentioned three, we have to implement ourones.
As I started using python in my daily work, more and more questions had cropped up about the language and its refinement. One of them was to implement a custom array.
What we would like to achieve is to have a datastruct which behaves like an array.</description>
    </item>
    
    <item>
      <title>How to implement routing with n-ary tree</title>
      <link>/post/n-ary-routing/</link>
      <pubDate>Tue, 19 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/n-ary-routing/</guid>
      <description>Routing mechanism is one of the main parts of a web service. Here I provide one approach to achieve this. This implementation is based on n-ary tree and tree search.
Many ways are available to handle routes, from regex to n-ary trees to parse registered route one by one.
Different ways N-ary Trees In this approach we can consider the root node as / and all children nodes as route parts are separated by /.</description>
    </item>
    
    <item>
      <title>The Multibuilder Pattern</title>
      <link>/post/multibuilder-pattern/</link>
      <pubDate>Tue, 08 Jan 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/multibuilder-pattern/</guid>
      <description>In this post I would like to present a couple of solutions for builder pattern in python, and finally I show how I implemented a builder that I call multibuilder pattern.
Builder pattern comes in handy when we need to set a lot of fields of an object and we do not want to use many methods with multiple parameters.
All implementations are found in this repo: https://github.com/torokmark/builders_in_python
The Simple One Task: Let us implement a Person with the following fields like name, age, phone.</description>
    </item>
    
    <item>
      <title>Best practices to write an Entity in Spring/Hibernate</title>
      <link>/post/entity-best-practices/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/entity-best-practices/</guid>
      <description>Every entity has to have a public default contstructor fetchType = FetchType.LAZY on @OneToOne, @OneToMany and @ManyToOne and other associations (EAGER is the default except @OneToMany) If an association is not mandatory:  optional = false on association annotations @Column and @JoinColumn should contain nullable = false  Entity should implement Persistable&amp;lt;IDTYPE&amp;gt; interface  Create own interface with default implementation:   public interface Identifiable extends Persistable&amp;lt;Long&amp;gt; { default isNew() { return getId() == null; } }  All ids should be boxed like Long, Integer, String, etc.</description>
    </item>
    
  </channel>
</rss>