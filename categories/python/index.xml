<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on T[h]inking</title>
    <link>/categories/python/</link>
    <description>Recent content in Python on T[h]inking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Mar 2019 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing custom array in Python</title>
      <link>/post/implementing-custom-array/</link>
      <pubDate>Wed, 27 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/implementing-custom-array/</guid>
      <description>Python provides basic datastructures like dictionary, list, set, and tuple. If we need another datastruct which is different from the mentioned three, we have to implement ourones.
As I started using python in my daily work, more and more questions had cropped up about the language and its refinement. One of them was to implement a custom array.
What we would like to achieve is to have a datastruct which behaves like an array.</description>
    </item>
    
    <item>
      <title>How to implement routing with n-ary tree</title>
      <link>/post/n-ary-routing/</link>
      <pubDate>Tue, 19 Mar 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/n-ary-routing/</guid>
      <description>Routing mechanism is one of the main parts of a web service. Here I provide one approach to achieve this. This implementation is based on n-ary tree and tree search.
Many ways are available to handle routes, from regex to n-ary trees to parse registered route one by one.
Different ways N-ary Trees In this approach we can consider the root node as / and all children nodes as route parts are separated by /.</description>
    </item>
    
    <item>
      <title>The Multibuilder Pattern</title>
      <link>/post/multibuilder-pattern/</link>
      <pubDate>Tue, 08 Jan 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/multibuilder-pattern/</guid>
      <description>In this post I would like to present a couple of solutions for builder pattern in python, and finally I show how I implemented a builder that I call multibuilder pattern.
Builder pattern comes in handy when we need to set a lot of fields of an object and we do not want to use many methods with multiple parameters.
All implementations are found in this repo: https://github.com/torokmark/builders_in_python
The Simple One Task: Let us implement a Person with the following fields like name, age, phone.</description>
    </item>
    
  </channel>
</rss>