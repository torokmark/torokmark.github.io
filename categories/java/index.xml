<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on T[h]inking</title>
    <link>/categories/java/</link>
    <description>Recent content in Java on T[h]inking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Aug 2019 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Do you know Java: Entry Point in Interface or Enum</title>
      <link>/post/do-you-know-java-entry-point-in-interface/</link>
      <pubDate>Fri, 09 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-entry-point-in-interface/</guid>
      <description>All Java applications start with a class and an entry point in it. We can change the class type to others.
All Java applications start at one mutual point. That is a class which has at least one static method, called main as an entry point of the app. This method is called by JRE after the class is loaded when we execute java command with the appropriate name of the class.</description>
    </item>
    
    <item>
      <title>Safe navigation in languages</title>
      <link>/post/safe-navigation-in-languages/</link>
      <pubDate>Mon, 05 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/safe-navigation-in-languages/</guid>
      <description>As we saw in the previous post, Ruby development team introduced a safe navigation operator to get rid of painful chaining of objects, which could raise NPE in case of null object in the middle. But Ruby is not the only language that came up with this idea. Most of the languages have introduced this operator, usually called null propagation, or some other approaches to achieve the same goal.</description>
    </item>
    
    <item>
      <title>Do you know Java: Double Brace Initialization</title>
      <link>/post/do-you-know-java-double-brace-initialization/</link>
      <pubDate>Sun, 28 Jul 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-double-brace-initialization/</guid>
      <description>Double brace initialization is a very comfortable way to add values to a collection or pairs to a map instance instead of having multiple statements next to each other.
One of the most popular languages, though Java is full of interesting parts that look wierd or unusual at first glance. In the sequence I call Do you know Java, I would like to present these less known or unexplained parts of the languages.</description>
    </item>
    
    <item>
      <title>Best practices to write an Entity in Spring/Hibernate</title>
      <link>/post/entity-best-practices/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/entity-best-practices/</guid>
      <description>Every entity has to have a public default contstructor fetchType = FetchType.LAZY on @OneToOne, @OneToMany and @ManyToOne and other associations (EAGER is the default except @OneToMany) If an association is not mandatory:  optional = false on association annotations @Column and @JoinColumn should contain nullable = false  Entity should implement Persistable&amp;lt;IDTYPE&amp;gt; interface  Create own interface with default implementation:   public interface Identifiable extends Persistable&amp;lt;Long&amp;gt; { default isNew() { return getId() == null; } }  All ids should be boxed like Long, Integer, String, etc.</description>
    </item>
    
  </channel>
</rss>