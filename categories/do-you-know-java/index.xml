<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Do You Know Java on T[h]ink]er[ing</title>
    <link>/categories/do-you-know-java/</link>
    <description>Recent content in Do You Know Java on T[h]ink]er[ing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2019 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="/categories/do-you-know-java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Do you know Java: Arrays as Generic Containers</title>
      <link>/post/do-you-know-java-arrays-as-generic-containers/</link>
      <pubDate>Sat, 28 Dec 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-arrays-as-generic-containers/</guid>
      <description>We can assign different type of elements to an array even the operation is accepted in compile-time, that raises error in run-time.
Sometimes Java is tricky, even it has static type system, we can assign different type of elements to an array, which is accepted in compile time, even array contains different type than the types of the element.
Covariance Let S &amp;lt;: T mean that S is subtype of T and covariant is S &amp;lt;: T =&amp;gt; S&#39; &amp;lt;: T&#39;.</description>
    </item>
    
    <item>
      <title>Do you know Java: Parameter validation</title>
      <link>/post/do-you-know-java-parameter-validation/</link>
      <pubDate>Sat, 21 Dec 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-parameter-validation/</guid>
      <description>Checking method parameters is crutial to avoid inconvenient situations with null pointers or undesired values. Assertion and exception handling are two ways to give feedback to users about parameters.
What if we are intended to validate the parameters of a function? What if we liked to set up preconditions? How can we avoid working with null objects?
In this post we take a look at two approaches. At first, we see how we can check parameters with assertion and what its pros and cons are.</description>
    </item>
    
    <item>
      <title>Do you know Java: One more more more time</title>
      <link>/post/do-you-know-java-one-more-more-more-time/</link>
      <pubDate>Mon, 18 Nov 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-one-more-more-more-time/</guid>
      <description>Operators have arity. Sometimes we can make patterns out of them. Which is funny.
Every operator has an arity in Java. They can be either unary, binary, and ternary operators. Arity decides how many operands are accepted in the operation. This brings us the next riddle.
The Riddle What is the output of the next operation?
class Main { public static void main(String[] args) { int n = 0; int i = 1; n = i + + + + + + i; System.</description>
    </item>
    
    <item>
      <title>Do you know Java: Underscore as identifier</title>
      <link>/post/do-you-know-java-underscore-as-identifier/</link>
      <pubDate>Mon, 28 Oct 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-underscore-as-identifier/</guid>
      <description>We could use underscore as a variable name until Java 7, but it cannot be used as an identifier from Java 9 and upwards.
Java has strict rules about how to name a variable, which characters are accepted in it or which one can be the first one. Underscore is a legal character among alphabetic characters and numbers. What if I did not use any other chars just underscore? Is that still valid variable name?</description>
    </item>
    
    <item>
      <title>Do you know Java: Varargs as Entry Point Parameter</title>
      <link>/post/do-you-know-java-varargs-in-entry-point/</link>
      <pubDate>Tue, 15 Oct 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-varargs-in-entry-point/</guid>
      <description>Java 5 was one of those versions that brought much more features and syntactic sugars than any other of them. Varargs is one of those. This provides a very comfortable way to pass different number of arguments to a method. Can we use it anywhere?
Varargs is just a syntactic sugar, it can be used in a more flexible way than its predecessor, the typed array. It has the same characteristics which means it supports indexing, it has an attribute called length, it is iterable.</description>
    </item>
    
    <item>
      <title>Do you know Java: Underscores in Numeric Literals</title>
      <link>/post/do-you-know-java-underscores-in-numeric-literals/</link>
      <pubDate>Thu, 05 Sep 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-underscores-in-numeric-literals/</guid>
      <description>Underscore can be used in numeric literals to group digits in a numeric value. This way that can enhance code readability, decrease mistyping and helps visually keeping numeric values in range.
Code readability is one of the most important viewpoints of software development. The more readable the code is, the faster that can be understood by developers.
Java 7 introduced underscore as a comfortable way to separate digits of a numeric value into groups.</description>
    </item>
    
    <item>
      <title>Do you know Java: Single Source File Code</title>
      <link>/post/do-you-know-java-single-source-file-code/</link>
      <pubDate>Wed, 28 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-single-source-file-code/</guid>
      <description>Java 11 introduced a new way of executing applications. That gives us the opportunity to do it without excplicitely compiling it. What&amp;rsquo;s more, Java code can be run as a script.
In Java, compilation and execution of an app are two different steps. The java command gives us the feeling that we work with an interpreter.
The Pre-Java-11 era Compilation of the source code and execution of the app are separated commands before Java 11, as we see here:</description>
    </item>
    
    <item>
      <title>Do you know Java: Entry Point in Interface or Enum</title>
      <link>/post/do-you-know-java-entry-point-in-interface/</link>
      <pubDate>Fri, 09 Aug 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-entry-point-in-interface/</guid>
      <description>All Java applications start with a class and an entry point in it. We can change the class type to others.
All Java applications start at one common point. That is a class which has at least one static method, called main as an entry point of the app. This method is called by JRE after the class is loaded when we execute java command with the appropriate name of the class.</description>
    </item>
    
    <item>
      <title>Do you know Java: Double Brace Initialization</title>
      <link>/post/do-you-know-java-double-brace-initialization/</link>
      <pubDate>Sun, 28 Jul 2019 12:00:00 +0100</pubDate>
      
      <guid>/post/do-you-know-java-double-brace-initialization/</guid>
      <description>Double brace initialization is a very comfortable way to add values to a collection or pairs to a map instance instead of having multiple statements next to each other.
One of the most popular languages, though Java is full of interesting parts that look wierd or unusual at first glance. In the sequence I call Do you know Java, I would like to present these less known or unexplained parts of the languages.</description>
    </item>
    
  </channel>
</rss>